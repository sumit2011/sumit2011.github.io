[{"categories":["DSA"],"content":"Navigation system works on the concept of linked list. Note Use the table of contents to navigate to the portion that you are interested in. ","date":"25-12-2022","objectID":"/single_linked_list/:0:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"1. Introduction: Single linked list is a linear data structure. It is slightly different from array. It made by the nodes, each nodes consist a data and the address of the next node and each node are linked using pointers. Here data are not stored in the contiguous memory location, nodes are present anywhere in the memory space but every nodes are linked with eachother that’s why we call this linked list. Main benefit of linked list is that we can insert or delete data from any position in the list. ","date":"25-12-2022","objectID":"/single_linked_list/:1:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"2. Creation of Node To create a new node in C++, you will need to define a structure or class that represents a node, and then create an instance of that structure or class. Here we will use structure to create or define a node. Here is an example of a node structure in C++ or C: struct Node { int data; struct Node *next; }; struct Node *head = NULL; ","date":"25-12-2022","objectID":"/single_linked_list/:2:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"3. Insertion An insertion operation in a single linked list involves adding a new node to the list. For this first you have to create a newnode and then insert this node where you want. There are several ways to insert a node in the list: At the beginning of the list At the end of the list At a specific position of the list ","date":"25-12-2022","objectID":"/single_linked_list/:3:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"3.1 Insertion at Begining To insert a new node at the beginning of the list, you need to create a newnode and set it’s next pointer to point to the current head of the list. Then, you can set the head of the list to the newnode. You also have to check whether the first node is present or not in the list or we can say list is empty or not. // insertion at begining void insertAtBeg(int value) { struct Node *newnode; newnode = (struct Node *)malloc(sizeof(struct Node)); newnode-\u003edata = value; if (head == NULL) { newnode-\u003enext = NULL; head = newnode; } else { newnode-\u003enext = head; head = newnode; } printf(\"%d is inserted at beginning.\\n\", value); } ","date":"25-12-2022","objectID":"/single_linked_list/:3:1","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"3.2 Insertion at Last To insert a new node at the end of the list, you need to traverse the list until you reach the last node. Then, you can set the next pointer of the last node to point to the newnode. If the list is empty then set the head to the newnode. temp is just a temporary node just like count variable, after the operation it does’nt have any importance. // insertation at end void insertATend(int value) { struct Node *newnode; newnode = (struct Node *)malloc(sizeof(struct Node)); newnode-\u003edata = value; if (head == NULL) { newnode-\u003enext = NULL; head = newnode; } else { struct Node *temp; temp = head; while (temp-\u003enext != NULL) { temp = temp-\u003enext; } temp-\u003enext = newnode; newnode-\u003enext = NULL; } printf(\"%d is inserted at the end.\\n\", value); } Traversal Technique Traversal is the process or technique of visiting and processing each node in a data structure, such as a linked list, tree, or graph. There are several way to traverse. Here we use the simple traversal technique in which we form a temp variable or node and traverse the each node one by one just pointing to the next pointer to the temp. temp=temp-\u003enext; ","date":"25-12-2022","objectID":"/single_linked_list/:3:2","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"3.3 Insertion at Any Position To insert a new node at a desired position in the list, first you need to make a temporary node say temp initialise with head then traverse the list until you reach the node before the position where you want to insert the newnode. Then, you can set the next pointer of the newnode to point to the node at the desired position, and set the next pointer of the node before the position to point to the newnode. // insertion at any position void insertAtPos(int pos, int value) { struct Node *newnode; newnode = (struct Node *)malloc(sizeof(struct Node)); newnode-\u003edata = value; struct Node *temp = NULL; int i = 1; temp = head; while (i \u003c pos - 1) { temp = temp-\u003enext; i++; } newnode-\u003enext = temp-\u003enext; temp-\u003enext = newnode; printf(\"%d is inserted at the %dth position.\\n\", value, pos); } Seg Fault Here you get a segmentation fault if you enter that position which are not exist in the list. For this first you have to check whether the position is present or not in the list then insert the node at that position. ","date":"25-12-2022","objectID":"/single_linked_list/:3:3","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"4. Deletion A deletion operation in a single linked list involves removing a node from the list and free the space. First make a temp node, traverse to that node and do the operation. There are several ways to delete a node from the list: Deleting the head node Deleting the last node Deleting a node from the specific position of the list ","date":"25-12-2022","objectID":"/single_linked_list/:4:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"4.1 Deletion from Begining To delete the head node or first node, first you have to make a temp node initialise with head then set the head of the list to the next node in the list. Now free the temp. // deletion at begining void deleteatBeg() { if (head == NULL) { printf(\"The list is empty.\\n\"); } else { struct Node *temp; temp = head; head = head-\u003enext; printf(\"%d is deleted from the begining\\n\", temp-\u003edata); free(temp); } } ","date":"25-12-2022","objectID":"/single_linked_list/:4:1","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"4.2 Deletion from End To delete the last node, make a temp node traverse the list until you reach the second-to-last node. Set the temp to the last node of the list. Then, you can set the next pointer of the second-to-last node to null. Now free the temp. // deletion at end void deleteatEnd() { if (head == NULL) { printf(\"The list is empty.\\n\"); } else { struct Node *temp, *prev; prev = temp = head; while (temp-\u003enext != NULL) { prev = temp; temp = temp-\u003enext; } prev-\u003enext = NULL; printf(\"%d is deleted from the end\\n\", temp-\u003edata); free(temp); } } ","date":"25-12-2022","objectID":"/single_linked_list/:4:2","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"4.3 Deletion from Any Position To delete a node in the middle of the list, you need to traverse the list until you reach the node before the one you want to delete. Set the temp to the node to be deleted in the list. Then, you can set the next pointer of the previous node to point to the node after the one you want to delete. Free the temp. // deletion at any position void deleteatPos(int pos) { struct Node *nextnode, *temp; int i = 1; nextnode = temp = head; while (i \u003c pos) { temp = nextnode; nextnode = nextnode-\u003enext; i++; } temp-\u003enext = nextnode-\u003enext; printf(\"%d is deleted from the %dth position.\\n\", nextnode-\u003edata, pos); free(nextnode); } Seg Fault Here also you get a segmentation fault if you delete that position which are not exist in the list. For this first you have to check whether the position is present or not in the list then delete the node from that position. ","date":"25-12-2022","objectID":"/single_linked_list/:4:3","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"5. Sorting There are several way to sort the list. // sorting of linked list void sortlist() { struct Node *ptr, *cpt; ptr = head; int temp; while (ptr-\u003enext != NULL) { cpt = ptr-\u003enext; while (cpt != NULL) { if (ptr-\u003edata \u003e cpt-\u003edata) { temp = ptr-\u003edata; ptr-\u003edata = cpt-\u003edata; cpt-\u003edata = temp; } cpt = cpt-\u003enext; } ptr = ptr-\u003enext; } printf(\"The list is sorted successfully.\\n\"); } ","date":"25-12-2022","objectID":"/single_linked_list/:5:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"6. Reversing To reverse the linked list, You have to iterate the linked list and for each node, changing the next pointer to point to the previous node instead of the next node as it traverses the linked list. This effectively reverses the order of the nodes in the linked list. The function returns the reversed linked list by returning the last node in the original linked list as the new head. // to reverse the list void reverse() { struct Node *current = head; struct Node *prev = NULL, *next = NULL; while (current != NULL) { next = current-\u003enext; current-\u003enext = prev; prev = current; current = next; } head = prev; printf(\"The list is reversed successfully.\\n\"); } ","date":"25-12-2022","objectID":"/single_linked_list/:6:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"7. Print Function To print the list you have to travarse the list and print each node one by one. For this make a temp node initialise with head, travarse and print. // printing of linked list void display() { printf(\"The list is: \"); struct Node *temp; temp = head; while (temp != NULL) { printf(\"%d \", temp-\u003edata); temp = temp-\u003enext; } printf(\"\\n\\n\"); } ","date":"25-12-2022","objectID":"/single_linked_list/:7:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"8. To Find Length To find the length of the list, first make a temp node initialise with head than travarse the list and increment the count by 1 on every travarsal until you reach to the last node. At last print the count value. // length of the linked int getlength() { int count = 0; struct Node *temp = head; while (temp != NULL) { count++; temp = temp-\u003enext; } printf(\"Total nodes present in the list is: %d\\n\", count); } ","date":"25-12-2022","objectID":"/single_linked_list/:8:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":"9. Main Function In the main function. we check all the function whether they are working or not, call all the functions one by one. // main function int main() { insertAtBeg(34); insertAtBeg(45); insertAtBeg(72); insertAtBeg(50); insertAtBeg(89); insertAtBeg(99); insertATend(23); insertATend(55); insertATend(13); insertATend(41); insertAtPos(6, 8992); display(); deleteatBeg(); deleteatEnd(); deleteatPos(3); display(); sortlist(); display(); insertATend(58); display(); reverse(); display(); insertAtBeg(99); insertATend(23); display(); getlength(); return 0; } Note It will be a better practice if you take the input from the user in the output terminal. In this case the main function will be: // main function int main() { int choice,value,pos; printf(\"1) Insert at begining\\n\"); printf(\"2) insert at last\\n\"); printf(\"3) Insert at any position\\n\"); printf(\"4) Delete from the begining\\n\"); printf(\"5) Delete from the end\\n\"); printf(\"6) Delete from any position\\n\"); printf(\"7) Sort the list\\n\"); printf(\"8) Reverse the list\\n\"); printf(\"9) Fint the length of the list\\n\"); printf(\"10) Display the list\\n\"); printf(\"11) Exit\\n\") do { printf(\"Enter Choice: \"); scanf(\"%d\",\u0026choice); switch (choice) { case 1: printf(\"Enter value to be inserted: \"); scanf(\"%d\",\u0026value); insertAtBeg(value); break; case 2: printf(\"Enter value to be inserted: \"); scanf(\"%d\",\u0026value); insertATend(value); break; case 3: printf(\"Enter the position and the value to be inserted respectively: \"); scanf(\"%d%d\",\u0026pos,\u0026value); insertAtPos(pos,value); break; case 4: deleteatBeg(); break; case 5: deleteatEnd(); break; case 6: printf(\"Enter the position of the node to be deleted: \"); scanf(\"%d\",\u0026pos); deleteatPos(pos); break; case 7: sortlist(); break; case 8: reverse(); break; case 9: getlength(); break; case 10: display(); break; case 11: printf(\"Exit\"); break; default: break; } } while (choice!=11) return 0; } Complete Code of Single Linked List: Code Fun Dose \u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube-nocookie.com/embed/FMzj9UYHTPQ?autoplay=0\u0026controls=1\u0026end=0\u0026loop=0\u0026mute=0\u0026start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\" \u003e\u003c/iframe\u003e \u003c/div\u003e Problems Linked List 1 (CodeChef) Linked List 2 (CodeChef) Reversed Linked List (HackerEarth) Remove Friends (HackerEarth) ","date":"25-12-2022","objectID":"/single_linked_list/:9:0","tags":["C","C++"],"title":"Single Linked List","uri":"/single_linked_list/"},{"categories":["DSA"],"content":" Note Use the table of contents to navigate to the portion that you are interested in. ","date":"30-11-2023","objectID":"/binary-search/:0:0","tags":["C","C++"],"title":"Binary Search","uri":"/binary-search/"},{"categories":["DSA"],"content":"Introduction We know that there is two type of searching technique 1.Linear Search and 2.Binary Search. Here we discus only about binary search. Binary search is a searching technique, it is used to locate a specific element with in the sorted array. Warning It is applicable only on monotonic function which means values should be in the increasing or decreasing order. ","date":"30-11-2023","objectID":"/binary-search/:1:0","tags":["C","C++"],"title":"Binary Search","uri":"/binary-search/"},{"categories":["DSA"],"content":"Time Complexity: Option Description Best Case: O(1) Average Case: O(log N) Worst Case: O(log N) ","date":"30-11-2023","objectID":"/binary-search/:1:1","tags":["C","C++"],"title":"Binary Search","uri":"/binary-search/"},{"categories":["DSA"],"content":"Space Complexicity: Option Description Best Case: O(1) ","date":"30-11-2023","objectID":"/binary-search/:1:2","tags":["C","C++"],"title":"Binary Search","uri":"/binary-search/"},{"categories":["DSA"],"content":"Creation of Function First initialise start and end indices to the first and last element of the array respectively. then calculate the middle index by (start+end)/2. Inside the while loop, compare the value of mid with the key until the start index becomes less than or equal to the end index. Here three cases arises. Case 1: If the key matches with the mid element it returns the mid element. Case 2: If the key is greater than the mid element then we have to check the right part of the array for that we have to initialise the start as mid + 1. Case 3: If the key is less than the mid element than we have to check the left part of the array for that we have to update the end as mid - 1. Tip use mid= start + (end-start)/2 instead of (start+end)/2. #include\u003ciostream\u003e using namespace std; int binarysearch(int arr[], int size, int key) { int start =0; int end = size-1; //int mid= (start+end)/2; int mid= start + (end-start)/2; while(start \u003c= end){ if(arr[mid] == key){ return mid; } if(key\u003e arr[mid]){ //go to right part start= mid +1 ; } else{ end= mid - 1; //go to left part } //mid= (start+end)/2; mid = start + (end-start)/2; } return -1; } ","date":"30-11-2023","objectID":"/binary-search/:2:0","tags":["C","C++"],"title":"Binary Search","uri":"/binary-search/"},{"categories":["DSA"],"content":"The Main Function Now we check the code for both if the number of elements in the array is even or odd. In the main function we define two arrays 1st is even array and the 2nd one is odd array. After that we call the function and store the result in evenindex for even array and in oddindex for odd array after that we print the indexes. Here we see that our function works properly for both cases. We can see the output. int main() { int even[6]= {2,4,6,8,12,18}; int odd[5]= {3,8,11,14,16}; int evenindex= binarysearch(even, 6, 6); cout\u003c\u003c\"index of 6 is \"\u003c\u003cevenindex \u003c\u003c endl; int oddindex= binarysearch(odd, 5, 14); cout\u003c\u003c\"index of 14 is \"\u003c\u003coddindex \u003c\u003c endl; return 0; } ","date":"30-11-2023","objectID":"/binary-search/:3:0","tags":["C","C++"],"title":"Binary Search","uri":"/binary-search/"},{"categories":["DSA"],"content":"Output We got the right output for both cases. Complete Code #include\u003ciostream\u003e //it applicable only on monotonic function values should be in inc or dec order. using namespace std; int binarysearch(int arr[], int size, int key) { int start =0; int end = size-1; //int mid= (start+end)/2; int mid= start + (end-start)/2; while(start \u003c= end){ if(arr[mid] == key){ return mid; } //go to right part if(key\u003e arr[mid]){ start= mid +1 ; } else{ end= mid - 1; } //mid= (start+end)/2; mid = start + (end-start)/2; } return -1; } int main(){ int even[6]= {2,4,6,8,12,18}; int odd[5]= {3,8,11,14,16}; int evenindex= binarysearch(even, 6, 6); cout\u003c\u003c\"index of 6 is \"\u003c\u003cevenindex \u003c\u003c endl; int oddindex= binarysearch(odd, 5, 14); cout\u003c\u003c\"index of 14 is \"\u003c\u003coddindex \u003c\u003c endl; return 0; } ","date":"30-11-2023","objectID":"/binary-search/:3:1","tags":["C","C++"],"title":"Binary Search","uri":"/binary-search/"},{"categories":["DSA"],"content":"Advantages \u0026 Drawbacks Advantages faster than linear search More efficient Minimal memory requirement Easy to understand and implement More efficient for large dataset Drawbacks The array should be sorted. Not suitable for unordered lists Inefficient for small dataset Not adaptive for changes Limited to static dataset Applications Database searching Finding elements in a array Used in file system to search a specific file In machine learning In Game development Problems First and Last position of an Element in Sorted Array (Coding Ninjas) Binary Search (Coding Ninjas) First and Last position of an element in sorted array solution // pair \u003cint, int\u003e p; // p.first = 5; // p.second = 6; #include\u003ciostream\u003e using namespace std; int firstOccurance(int arr[], int n, int key){ int start = 0; int end = n-1; int mid = start +(end-start)/2; int ans = -1; while(start \u003c= end) { if (arr[mid]== key) { ans = mid; end = mid - 1; } else if (arr[mid] \u003c key) { // go to right part start = mid + 1; } else if (arr[mid] \u003e key) { // go to left part end = mid -1; } mid = start + (end - start)/2; } return ans; } int lastOccurance(int arr[], int n, int key){ int start = 0; int end = n-1; int mid = start +(end-start)/2; int ans = -1; while(start \u003c= end) { if (arr[mid]== key) { ans = mid; start = mid + 1; } else if (arr[mid] \u003c key) { // go to right part start = mid + 1; } else if (arr[mid] \u003e key) { // go to left part end = mid -1; } mid = start + (end - start)/2; } return ans; } pair\u003cint , int\u003e firstAndLastOccurance(int arr[], int n, int key){ pair\u003cint , int \u003e p; p.first = firstOccurance(arr , n, key); p.second = lastOccurance(arr , n , key); return p; } int main() { int arr[9]={1,2,3,3,3,3,3,4,5}; cout \u003c\u003c \" first occurace of 3 is index \" \u003c\u003c firstOccurance(arr, 9 , 3) \u003c\u003c endl; cout \u003c\u003c \" last occurace of 3 is index \" \u003c\u003c lastOccurance(arr, 9 , 3) \u003c\u003c endl; firstAndLastOccurance(arr, 9, 3); } Fun Dose \u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube-nocookie.com/embed/FMzj9UYHTPQ?autoplay=0\u0026controls=1\u0026end=0\u0026loop=0\u0026mute=0\u0026start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\" \u003e\u003c/iframe\u003e \u003c/div\u003e ","date":"30-11-2023","objectID":"/binary-search/:4:0","tags":["C","C++"],"title":"Binary Search","uri":"/binary-search/"},{"categories":["DSA"],"content":" Note Use the table of contents to navigate to the portion that you are interested in. ","date":"30-11-2023","objectID":"/graph/:0:0","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"1. Intro: Traversal in graph: There are two main type of traversal technique in the graph: BFS: Breadth First Search DFS: Depth First Search ","date":"30-11-2023","objectID":"/graph/:1:0","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"BFS: in this traversal technique the traversal will be breadthwise // bfs of graph // 0 based indexing // gfg ques // vector\u003cint\u003e adj[] -\u003e adjacency list vector\u003cint\u003e bfsOfGraph(int V, vector\u003cint\u003e adj[]) { // Code here int vis[V] = {0}; // visited arrray mark all element initially zero vis[0] = 1; // marked visted for 0 queue\u003cint\u003e q; q.push(0); // pushing starting node in the queue vector\u003cint\u003e bfs; // to store the bfs traversal of the graph while (!q.empty()) { int node = q.front(); q.pop(); bfs.push_back(node); // store the node in bfs // pushing the neighbors of the node in the queue if not visited for (auto i : adj[node]) { if (!vis[i]) { vis[i] = 1; // mark visited q.push(i); // push the node in the queue } } } return bfs; // space complexicity = O(3N) --\u003e O(N) // time complexicity = O(N) + O(2E) } ","date":"30-11-2023","objectID":"/graph/:1:1","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"DFS: It’s a recursive technique here the traversal will be depthwise // Function to return a list containing the DFS traversal of the graph. void dfs(int node, vector\u003cint\u003e adj[], int vis[], vector\u003cint\u003e \u0026ls) { vis[node] = 1; // mark node visited ls.push_back(node); // list to store dfs traversal // traverse all its neighbours of the node for (auto i : adj[node]) { // if non visited call dfs again if (!vis[i]) { // recursive call dfs(i, adj, vis, ls); } } } vector\u003cint\u003e dfsOfGraph(int V, vector\u003cint\u003e adj[]) { // Code here int vis[V] = {0}; // visited array int start = 0; vector\u003cint\u003e ls; // list to store dfs traversal dfs(start, adj, vis, ls); return ls; } ","date":"30-11-2023","objectID":"/graph/:1:2","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"conversion from adjacency matrix to adjancency list // conversion from adjacency matrix to adjancency list vector\u003cint\u003e adjList[V]; for (int i = 0; i \u003c V; i++) { for (int j = 0; j \u003c V; j++) { if (adj[i][j] == 1 \u0026\u0026 i != j) { adjList[i].push_back(j); adjList[j].push_back(i); } } } ","date":"30-11-2023","objectID":"/graph/:1:3","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"edges are given making the adjacency list // given: vector\u003cvector\u003cint\u003e\u003e \u0026edges // Code here vector\u003cpair\u003cint, int\u003e\u003e adj[n + 1]; for (auto it : edges) { adj[it[0]].push_back({it[1], it[2]}); adj[it[1]].push_back({it[0], it[2]}); } ","date":"30-11-2023","objectID":"/graph/:1:4","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"detect cycle in undirected graph // detect cycle in undirected graph bool detect(int src , vector\u003cint\u003e adj[], int vis[]){ vis[src] = 1; queue\u003cpair\u003cint, int\u003e q; q.push({src , -1}); while(!q.empty()){ int node = q.front().first; int parent = q.front().second; q.pop(); for(auto adjnode : adj[node]){ if(!vis[adjnode]){ vis[adjnode] = 1; q.push({adjnode , node}); } else if(parent != adjnode){ return true; } } } return false; } bool iscysle(int v, vector\u003cint\u003e adj[]){ int vis[v] = {0}; for(int i=0; i\u003cv; i++){ if(!vis[i]){ if(detect(i,adj,vis)){ return true; } } } return false; } ","date":"30-11-2023","objectID":"/graph/:1:5","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"Detect cycle in directed graph: // detect cycle in directed graph // gfg: https://www.geeksforgeeks.org/problems/detect-cycle-in-a-directed-graph/1 bool dfs(vector\u003cint\u003e adj[] , int vis[] , int pathvis[] , int node){ vis[node] = 1; pathvis[node] = 1; // traverse the adjacent ndoes for(auto it : adj[node]){ if(!vis[it]){ if(dfs(adj , vis , pathvis , it)){ return true; } } // if the node has been previously visited // but it has to be visited on the same path else if(pathvis[it]){ return true; } } pathvis[node] = 0; return false; } bool isCyclic(int V, vector\u003cint\u003e adj[]) { // code here int vis[V]= {0}; int pathvis[V] = {0}; for(int i =0; i\u003c V; i++){ if(!vis[i]){ if(dfs(adj , vis , pathvis , i)){ return true; } } } return false; } ","date":"30-11-2023","objectID":"/graph/:1:6","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"Rotten Oranges: int orangesRotting(vector\u003cvector\u003cint\u003e\u003e\u0026 grid) { // Code here int n = grid.size(); int m = grid[0].size(); queue\u003cpair\u003cpair\u003cint , int\u003e , int\u003e\u003e q; int vis[n][m]; for(int i =0; i \u003c n ; i++){ for(int j =0; j\u003cm ; j++){ if(grid[i][j] == 2){ q.push({i, j} , 0}); vis[i][j] = 2; } else{ vis[i][j] = 0; } } } int tm =0; int drow[] = {-1,0,+1,0}; int dcol[] = { 0 , +1 , 0 , -1}; while(!q.empty()){ int r = q.front().first.first; int c = q.front().first.second; int t = q.front().second; tm = max(tm , t); q.pop(); for(int i =0; i \u003c 4 ; i++){ int nrow = r+drow[i]; int ncol = c + dcol[i]; if(nrow \u003e= 0 \u0026\u0026 nrow \u003c n \u0026\u0026 ncol \u003e=0 \u0026\u0026 ncol \u003c m \u0026\u0026vis[nrow][ncol] == 0 \u0026\u0026 grid[nrow][ncol] == 1){ q.push({nrow,ncol}, t+1); vis[nrow][ncol] = 2; } } } for(int i =0; i\u003cn ; i++){ for(int j =0 ; j\u003cm ; j++){ if(vis[i][j] != 2 \u0026\u0026 grid[i][j] == 1){ return -1; } } } return tm; } ","date":"30-11-2023","objectID":"/graph/:1:7","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"No of islands: // Function to find the number of islands. void dfs(int i,int j,vector\u003cvector\u003cchar\u003e\u003e \u0026grid){ if(i\u003e=grid.size() || j\u003e=grid[0].size() || grid[i][j]=='0' || i\u003c0 || j\u003c0){ return; } grid[i][j]='0'; dfs(i,j-1,grid); dfs(i-1,j,grid); dfs(i,j+1,grid); dfs(i+1,j,grid); dfs(i-1,j-1,grid); dfs(i-1,j+1,grid); dfs(i+1,j-1,grid); dfs(i+1,j+1,grid); } int numIslands(vector\u003cvector\u003cchar\u003e\u003e\u0026 grid) { // Code here int n = grid.size(); int m = grid[0].size(); // vector\u003cvector\u003cint\u003e\u003e vis(n , vector\u003cint\u003e(m,0)); int cnt = 0; for(int row= 0 ; row\u003c n;row++){ for(int col =0; col\u003cm; col++){ if( grid[row][col] == '1') { cnt++; dfs(row,col, grid); } } } return cnt; } ","date":"30-11-2023","objectID":"/graph/:1:8","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"No of provinces: // dfs function void dfs(int node, vector\u003cint\u003e adj[], int vis[] ){ vis[node] = 1; // mark node visited // traverse all its neighbours of the node for(auto i: adj[node]){ // if non visited call dfs again if(!vis[i]){ // recursive call dfs(i, adj , vis ); } } } int numProvinces(vector\u003cvector\u003cint\u003e\u003e adj, int V) { // code here // conversion from adjacency matrix to adjancency list vector\u003cint\u003e adjList[V]; for(int i =0; i\u003cV ; i++){ for(int j=0 ; j\u003c V ;j++){ if(adj[i][j] == 1 \u0026\u0026 i != j){ adjList[i].push_back(j); adjList[j].push_back(i); } } } int vis[V] = {0}; int count = 0; for(int i = 0; i\u003c V; i++){ if(!vis[i]){ count++; dfs(i,adjList,vis); } } return count; } ","date":"30-11-2023","objectID":"/graph/:1:9","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"surrounded regins : Replace O’s with X’s in a given matrix: // replace O's with X's in a given matrix // gfg: https://www.geeksforgeeks.org/problems/replace-os-with-xs0052/1 void dfs(int row, int col, vector\u003cvector\u003cint\u003e\u003e \u0026vis, vector\u003cvector\u003cchar\u003e\u003e \u0026mat) { // mark visited vis[row][col] = 1; // check for all 4 direction up ,right, down, left int delrow[] = {-1, 0, +1, 0}; int delcol[] = {0, +1, 0, -1}; int n = mat.size(); // row size int m = mat[0].size(); // column size // traverse in all 4 direction for (int i = 0; i \u003c 4; i++) { // new row and new column int nrow = row + delrow[i]; int ncol = col + delcol[i]; if (nrow \u003e= 0 \u0026\u0026 nrow \u003c n \u0026\u0026 ncol \u003e= 0 \u0026\u0026 ncol \u003c m \u0026\u0026 !vis[nrow][ncol] \u0026\u0026 mat[nrow][ncol] == 'O') { // recursive call dfs(nrow, ncol, vis, mat); } } } vector\u003cvector\u003cchar\u003e\u003e fill(int n, int m, vector\u003cvector\u003cchar\u003e\u003e mat) { // code here // n-\u003e rows; // m-\u003e col vector\u003cvector\u003cint\u003e\u003e vis(n, vector\u003cint\u003e(m, 0)); // vector\u003cvector\u003cchar\u003e\u003e temp = mat; // check first row and last row for (int j = 0; j \u003c m; j++) { // first row if (mat[0][j] == 'O' \u0026\u0026 vis[0][j] == 0) { // call dfs dfs(0, j, vis, mat); } // last row if (mat[n - 1][j] == 'O' \u0026\u0026 vis[n - 1][j] == 0) { // call dfs dfs(n - 1, j, vis, mat); } } // check first and last column for (int i = 0; i \u003c n; i++) { // first col if (mat[i][0] == 'O' \u0026\u0026 vis[i][0] == 0) { // call dfs dfs(i, 0, vis, mat); } // last col if (mat[i][m - 1] == 'O' \u0026\u0026 vis[i][m - 1] == 0) { // call dfs dfs(i, m - 1, vis, mat); } } // after checking boundaries mark all remaining Os with Xs in the matrix for (int i = 0; i \u003c n; i++) { for (int j = 0; j \u003c m; j++) { if (mat[i][j] == 'O' \u0026\u0026 !vis[i][j]) { mat[i][j] = 'X'; } } } return mat; } ","date":"30-11-2023","objectID":"/graph/:1:10","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"2. Topological Sort Algo : TOPO Sort It is applicable only on DAG (directed acyclic graph). only linear ordering of vertices such that if there is an edge between u and v , u always appear before v in ther ordering. ","date":"30-11-2023","objectID":"/graph/:2:0","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"DFS using stack and array Apporach: Call dfs recursively and reach to the last node. Mark it visited. Return and push the node into the stack after completion of dfs for that node. Pop the stack one by one and store into ans array void dfs(int node , int vis[] , stack\u003cint\u003e\u0026st , vector\u003cint\u003e adj[]){ vis[node] = 1; for(auto i : adj[node]){ if(!vis[i]){ dfs(i,vis,st, adj); } } st.push(node); } vector\u003cint\u003e toposort(int v, vector\u003cint\u003e adj[]){ int vis[v] = {0}; stack\u003cint\u003e st; for(int i =0 ; i\u003c v ; i++){ if(!vis[i]){ dfs(i,vis , st , adj); } } vector\u003cint\u003eans; while(!st.empty()){ ans.push_back(st.top()); st.pop(); } return ans; } ","date":"30-11-2023","objectID":"/graph/:2:1","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"KAHN’S Algo : BFS queue and array Approach: insert all nodes with indegree zero in the queue. Take them out of the queue and reduce the indegree of the adjacent nodes. // BFS // TC: O(V+E) // V: no of nodes and E: no of edges vector\u003cint\u003e toposort(int v, vector\u003cint\u003e adj[]) { int indegree[v] = {0}; for (int i = 0; i \u003c v; i++) { for (auto it : adj[i]) { indegree[it]++; } } queue\u003cint\u003e q; for (int i = 0; i \u003c v; i++) { if (indegree[i] == 0) { q.push(i); } } vector\u003cint\u003e topo; while (!q.empty()) { int node = q.front(); q.pop(); topo.push_back(node); for (auto it : adj[node]) { indegree[it]--; if (indegree[it] == 0) { q.push(it); } } } return topo; } ","date":"30-11-2023","objectID":"/graph/:2:2","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"3. Dijkstra Algo shortesrt path algorythm it is used for finding the shortest path from one node to another node in the given graph edge weights should be non negative. it can be implemented by three methods using queue(bad) using priority queue(good) using set(better) time complexicity : Elog(V) where E is the no of edges ans V is the number of nodes we do not use queue because in queue there is unnecessary occurance of distance for the same node due to this it takes a lot of time so it is a bad practice. we use priority queue because it stores the minimum value at the top (min heap) and we need the minimum distance so it is better choice to use pq. we use set because it has the ability to erase the entry from the set set stores the unique values and the smallest at the top in ascending order. Using priority queue: // dijkstra algo using priority queue vector\u003cint\u003e dijkstra(int V, vector\u003cvector\u003cint\u003e\u003e adj[], int S) { // Code here // using priority queue to sotre the pair of distance and node. priority_queue\u003cpair\u003cint, int\u003e, vector\u003cpair\u003cint, int\u003e\u003e, greater\u003cpair\u003cint, int\u003e\u003e\u003e pq; vector\u003cint\u003e dist(V); for (int i = 0; i \u003c V; i++) { dist[i] = 1e9; } dist[S] = 0; pq.push({0, S}); // storintg the distance of source node zero from the source node. while (!pq.empty()) { int dis = pq.top().first; // first one denotes the distance from the source int node = pq.top().second; // second denotes the node pq.pop(); for (auto it : adj[node]) { int edgeweight = it[1]; int adjnode = it[0]; if (dis + edgeweight \u003c dist[adjnode]) { dist[adjnode] = dis + edgeweight; pq.push({dist[adjnode], adjnode}); } } } return dist; } Using set // dijkstra algo using set vector\u003cint\u003e dijkstra(int v , vector\u003cvector\u003cint\u003e\u003e adj[] , int s){ set\u003cpair\u003cint , int\u003e\u003e st; vector\u003cint\u003e dist(v, 1e9); st.insert({0,s}); dist[s] = 0; while(!q.empty()){ auto it = *(st.begin()); int distance = it.first; int node = it.second; st.erase(it); for(auto it : adj[node]){ int adjnode = it[0]; int edgeweight = it[1]; if(distance + edgeweight \u003c dist[adjnode]){ // erse if it exist if(dist[adjnode] != 1e9){ st.erase({dist[adjnode] , adj[node]}); } // update the distance dist[adjnode] = distance + edgeweight; st.insert({dist[adjnode] , adjnode}); } } } return dist; } ","date":"30-11-2023","objectID":"/graph/:3:0","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":"Shortest path in undirected weighted graph using dijkstras algo vector\u003cint\u003e shortestPath(int n, int m, vector\u003cvector\u003cint\u003e\u003e \u0026edges) { // creating adjacency list from the given the edges pair vector\u003cpair\u003cint, int\u003e\u003e adj[n + 1]; for (auto it : edges) { adj[it[0]].push_back({it[1], it[2]}); adj[it[1]].push_back({it[0], it[2]}); } // defining the priority queue a min heap concept priority_queue\u003cpair\u003cint, int\u003e, vector\u003cpair\u003cint, int\u003e\u003e, greater\u003cpair\u003cint, int\u003e\u003e\u003e pq; //creating a distance array and a parent aray to track the path // parent array will tell us where the node is come from vector\u003cint\u003e dist(n + 1, 1e9), parent(n + 1); for (int i = 1; i \u003c= n; i++) { parent[i] = i; } dist[1] = 0; pq.push({0, 1}); while (!pq.empty()) { auto it = pq.top(); int node = it.second; int dis = it.first; pq.pop(); // traversing the adjacent nodes of the given node in given graph for (auto it : adj[node]) { int adjnode = it.first; int edw = it.second; if (dis + edw \u003c dist[adjnode]) { dist[adjnode] = dis + edw; pq.push({dis + edw, adjnode}); parent[adjnode] = node; } } } if (dist[n] == 1e9) return {-1}; // reconstruct the path vector\u003cint\u003e path; int node = n; while (parent[node] != node) { path.push_back(node); node = parent[node]; } path.push_back(1); path.push_back(dist[n]); reverse(path.begin(), path.end()); return path; } ","date":"30-11-2023","objectID":"/graph/:3:1","tags":["C","C++"],"title":"Graph","uri":"/graph/"},{"categories":["DSA"],"content":" Note Use the table of contents to navigate to the portion that you are interested in. ","date":"15-01-2023","objectID":"/stack/:0:0","tags":["C","C++"],"title":"Stack (array implementation)","uri":"/stack/"},{"categories":["DSA"],"content":"Introduction Stack is a linear data structure that follows a particular order in which several type of operations like push pull are performed. The order can be LIFO or FILO, both are same so don’t be confused. LIFO:(Last in first out) It means which element that can be filled at last that will be removed first. FILO:(first in last out) It means that element will be removed at last which is filled at first. Operations that can be performed: push pop peek isempty ","date":"15-01-2023","objectID":"/stack/:1:0","tags":["C","C++"],"title":"Stack (array implementation)","uri":"/stack/"},{"categories":["DSA"],"content":"Creation of stack The class has three properties: arr a pointer array to store the stack elements, top to represent the topmost index in the stack, and size to specify the maximum capacity of the stack. Also, the class has a constructor that takes an integer size as a parameter and initializes the properties accordingly. The constructor allocates memory for the stack using the new keyword, sets the stack size, and initializes top to -1 to indicate that the stack is initially empty. //array emplementation of stack #include\u003ciostream\u003e using namespace std; class stack { //properties public: int *arr; int top; int size; //behaviour stack(int size) { this -\u003e size = size; arr = new int[size]; top=-1; } }; ","date":"15-01-2023","objectID":"/stack/:2:0","tags":["C","C++"],"title":"Stack (array implementation)","uri":"/stack/"},{"categories":["DSA"],"content":"Push Function The push function is part of the stack class. It adds a new element to the stack. It checks if there is space available by comparing the difference between the maximum size of the stack and the current top index. If space is available, the function increments the top index to make room for the new element, assigns the new element to the top position in the array, effectively adding it to the stack. If the stack is already full, the function prints an error message indicating “stack overflow,” signifying that the operation cannot be performed. //push function void push (int element) { if(size-top \u003e1 ){ top++; arr[top] = element; } else{ cout \u003c\u003c \"stack overflow\" \u003c\u003c endl; } } ","date":"15-01-2023","objectID":"/stack/:3:0","tags":["C","C++"],"title":"Stack (array implementation)","uri":"/stack/"},{"categories":["DSA"],"content":"Pop Function The pop function remove the topmost element from the stack, it follows the (LIFO) principle. It first checks if there are any elements in the stack by examining the value of the top index. If the top index is greater than or equal to 0, it means there is at least one element in the stack. In that case, the function decrements the top index, effectively removing the top element and making the next element (if any) the new top. However, if the top index is less than 0, it means the stack is empty, and there are no elements to remove. In this situation, the function prints an error message, “stack underflow,”. //pop function void pop(){ if(top \u003e= 0){ top--; } else{ cout\u003c\u003c \" stack underflow \"\u003c\u003cendl; } } ","date":"15-01-2023","objectID":"/stack/:4:0","tags":["C","C++"],"title":"Stack (array implementation)","uri":"/stack/"},{"categories":["DSA"],"content":"Peek Function The peek function is used to look at the topmost element of the stack without removing it. When called, the function first checks if there are any elements in the stack by examining the value of the top index. If the top index is greater than or equal to 0, it means there is at least one element in the stack. In this case, the function returns the value of the element at the top position. However, if the top index is less than 0, it means the stack is empty, and there are no elements to peek at. In this situation, the function prints an error message, “stack is empty,” and returns -1 to indicate that there’s no valid element to return. int peek() { if(top \u003e=0 ) return arr[top]; else{ cout \u003c\u003c\"stack is empty \"\u003c\u003cendl; return -1; } } ","date":"15-01-2023","objectID":"/stack/:5:0","tags":["C","C++"],"title":"Stack (array implementation)","uri":"/stack/"},{"categories":["DSA"],"content":"IsEmpty function The isempty function is used to check whether the stack is empty or not. When called, the function examines the value of the top index, which represents the position of the topmost element in the stack. If the top index is equal to -1, it means there are no elements in the stack, and it is considered empty. In this case, the function returns true to indicate that the stack is empty. However, if the top index is not -1, it means there is at least one element in the stack, and it is not empty. In this situation, the function returns false to indicate that the stack is not empty. In summary, the isempty function provides a convenient way to check the emptiness status of the stack, returning true if it’s empty and false if it contains elements. bool isempty(){ if(top == -1){ return true; } else{ return false; } } ","date":"15-01-2023","objectID":"/stack/:6:0","tags":["C","C++"],"title":"Stack (array implementation)","uri":"/stack/"},{"categories":["DSA"],"content":"The main function In this C++ code, the main function demonstrates the usage of a stack. Firstly, it creates a stack object st with a size of 5. Then, it uses the push function to add three elements (22, 33, and 44) to the stack. The peek function is called to print the top element 44. Subsequently, the pop function is used to remove the top element from the stack, and peek is called again to print the new top element 33. This process is repeated two more times with the last element 22 being popped, and peek is called again, but the stack is now empty. Finally, the isempty function is called to verify if the stack is empty, and it prints stack is empty as the output, confirming that the stack is empty at this point. int main(){ stack st(5); st.push(22); st.push(33); st.push(44); cout \u003c\u003c st.peek()\u003c\u003cendl; st.pop(); cout \u003c\u003c st.peek()\u003c\u003cendl; st.pop(); cout \u003c\u003c st.peek()\u003c\u003cendl; st.pop(); cout \u003c\u003c st.peek()\u003c\u003cendl; if(st.isempty()){ cout\u003c\u003c \"stack is empty\"\u003c\u003cendl; } else cout\u003c\u003c\"stack is not empty\"\u003c\u003cendl; } output of the following code Complete Code //array emplementation of stack #include\u003ciostream\u003e using namespace std; class stack { //properties public: int *arr; int top; int size; //behaviour stack(int size) { this -\u003e size = size; arr = new int[size]; top=-1; } void push (int element) { if(size-top \u003e1 ){ top++; arr[top] = element; } else{ cout \u003c\u003c \"stack overflow\" \u003c\u003c endl; } } void pop(){ if(top \u003e= 0){ top--; } else{ cout\u003c\u003c \" stack underflow \"\u003c\u003cendl; } } int peek() { if(top \u003e=0 ) return arr[top]; else{ cout \u003c\u003c\"stack is empty \"\u003c\u003cendl; return -1; } } bool isempty(){ if(top == -1){ return true; } else{ return false; } } }; int main(){ stack st(5); st.push(22); st.push(33); st.push(44); cout \u003c\u003c st.peek()\u003c\u003cendl; st.pop(); cout \u003c\u003c st.peek()\u003c\u003cendl; st.pop(); cout \u003c\u003c st.peek()\u003c\u003cendl; st.pop(); cout \u003c\u003c st.peek()\u003c\u003cendl; if(st.isempty()){ cout\u003c\u003c \"stack is empty\"\u003c\u003cendl; } else cout\u003c\u003c\"stack is not empty\"\u003c\u003cendl; } Problems Two stack (Coding ninjas) Middle element (Coding ninjas) ","date":"15-01-2023","objectID":"/stack/:7:0","tags":["C","C++"],"title":"Stack (array implementation)","uri":"/stack/"},{"categories":["DSA"],"content":" Note Use the table of contents to navigate to the portion that you are interested in. ","date":"20-01-2023","objectID":"/binary-tree/:0:0","tags":["C","C++"],"title":"Binary Tree","uri":"/binary-tree/"},{"categories":["DSA"],"content":"Intro ","date":"20-01-2023","objectID":"/binary-tree/:1:0","tags":["C","C++"],"title":"Binary Tree","uri":"/binary-tree/"},{"categories":["DSA"],"content":"Basic operations in the binary tree Inserting an element Removing Searching Traversing Height of the tree Level of a node Size of the tree ","date":"20-01-2023","objectID":"/binary-tree/:2:0","tags":["C","C++"],"title":"Binary Tree","uri":"/binary-tree/"},{"categories":["DSA"],"content":"Application of binary tree ","date":"20-01-2023","objectID":"/binary-tree/:3:0","tags":["C","C++"],"title":"Binary Tree","uri":"/binary-tree/"},{"categories":["DSA"],"content":"Creation of binary tree First we create a class with name node which represent a node of the binary tree. Each node contain the data, pointer to the left child and pointer the right child. By the following code we #include\u003ciostream\u003e #include \u003cqueue\u003e using namespace std; class node { public: int data; node* left; node* right; node(int d) { this -\u003e data=d; this -\u003e left = NULL; this -\u003e right = NULL; } }; node* buildTree(node* root) { cout\u003c\u003c\"Enter The Data:\" \u003c\u003cendl; int data; cin\u003e\u003edata; root = new node(data); if(data== -1) { return NULL; } cout \u003c\u003c \"Enter data for inserting in left of \"\u003c\u003cdata \u003c\u003c endl; root-\u003eleft = buildTree(root-\u003eleft); cout \u003c\u003c\" Enter data for inserting in right of \"\u003c\u003cdata\u003c\u003c endl; root -\u003e right = buildTree(root-\u003eright); return root; } ","date":"20-01-2023","objectID":"/binary-tree/:4:0","tags":["C","C++"],"title":"Binary Tree","uri":"/binary-tree/"},{"categories":["DSA"],"content":"Different type of traversals in binary tree level order traversal Inorder Preorder Postorder ","date":"20-01-2023","objectID":"/binary-tree/:5:0","tags":["C","C++"],"title":"Binary Tree","uri":"/binary-tree/"},{"categories":["DSA"],"content":"Levelorder Traversal //level order triversal void levelOrderTraversal(node* root) { queue\u003cnode*\u003e q; q.push(root); q.push(NULL); while(!q.empty()) { node* temp = q.front(); q.pop(); if(temp==NULL){ cout\u003c\u003cendl; if(!q.empty()){ q.push(NULL); } } else{ cout\u003c\u003c temp -\u003e data \u003c\u003c \" \"; if(temp-\u003e left) { q.push ( temp-\u003e left); } if(temp-\u003eright){ q.push ( temp-\u003e right); } } } } ","date":"20-01-2023","objectID":"/binary-tree/:5:1","tags":["C","C++"],"title":"Binary Tree","uri":"/binary-tree/"},{"categories":["DSA"],"content":"Inorder Traversal //inorder traversal void inorder(node* root) { if(root == NULL){ return; } inorder(root-\u003eleft); cout\u003c\u003croot-\u003edata\u003c\u003c\" \"; inorder(root-\u003eright); } ","date":"20-01-2023","objectID":"/binary-tree/:5:2","tags":["C","C++"],"title":"Binary Tree","uri":"/binary-tree/"},{"categories":["DSA"],"content":"Preorder Traversal //preorder traversal void preorder(node* root) { if(root == NULL){ return; } cout\u003c\u003croot-\u003edata\u003c\u003c\" \"; preorder(root-\u003eleft); preorder(root-\u003eright); } ","date":"20-01-2023","objectID":"/binary-tree/:5:3","tags":["C","C++"],"title":"Binary Tree","uri":"/binary-tree/"},{"categories":["DSA"],"content":"Postorder Traversal //post traversal void postorder(node* root) { if(root == NULL){ return; } postorder(root-\u003eleft); postorder(root-\u003eright); cout\u003c\u003croot-\u003edata\u003c\u003c\" \"; } void buildFromLevelOrder(node* \u0026root){ queue\u003cnode*\u003e q;1 3 5 7 11 17 -1 -1 -1 -1 -1 -1 -1 cout\u003c\u003c\"enter data for root\"\u003c\u003cendl; int data; cin\u003e\u003edata; root = new node(data); q.push(root); while(!q.empty()){ node* temp = q.front(); q.pop(); cout\u003c\u003c \" enter left node for: \"\u003c\u003croot-\u003edata\u003c\u003cendl; int leftData; cin\u003e\u003eleftData; if(leftData != -1){ temp-\u003eleft = new node(leftData); q.push(temp-\u003eleft); } cout\u003c\u003c \"enter right node for: \"\u003c\u003croot-\u003edata\u003c\u003cendl; int rightData; cin\u003e\u003erightData; if(rightData != -1){ temp-\u003eright = new node(rightData); q.push(temp-\u003eright); } } } int main() { node* root = NULL; buildFromLevelOrder(root); levelOrderTraversal(root); // 1 3 5 7 11 17 -1 -1 -1 -1 -1 -1 -1 root = buildTree(root); cout\u003c\u003c\"the given tree is:\"\u003c\u003cendl; // 1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1 levelOrderTraversal(root); cout\u003c\u003c\"inorder traversal is: \"; inorder(root); cout\u003c\u003cendl; cout\u003c\u003c\"preorder traversal is: \"; preorder(root); cout\u003c\u003cendl; cout\u003c\u003c\"postorder traversal is: \"; postorder(root); return 0; } ","date":"20-01-2023","objectID":"/binary-tree/:5:4","tags":["C","C++"],"title":"Binary Tree","uri":"/binary-tree/"},{"categories":["DSA"],"content":"Imp functions to solve dsa problems ","date":"20-01-2023","objectID":"/binary-tree/:6:0","tags":["C","C++"],"title":"Binary Tree","uri":"/binary-tree/"},{"categories":["DSA"],"content":"converting BT into the inarr ","date":"20-01-2023","objectID":"/binary-tree/:6:1","tags":["C","C++"],"title":"Binary Tree","uri":"/binary-tree/"},{"categories":["DSA"],"content":"finding a node finding a node in the given binary tree finding the distance of a node from the root ","date":"20-01-2023","objectID":"/binary-tree/:6:2","tags":["C","C++"],"title":"Binary Tree","uri":"/binary-tree/"},{"categories":["Cyber Security"],"content":"Google hacking Google hacking is using different google operators to refine search results. Use of a search engine, such as google, to locate a security vulnerability on the internet. ","date":"05-08-2023","objectID":"/google-dorks/:0:1","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Downloading Movie Movie+name -inurl:(htm|html|php|pls|txt) intitle:index.of \"last modified\" (mp4|wma| acc|avi) ","date":"05-08-2023","objectID":"/google-dorks/:0:2","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"View Android Camera Photos: intitle:\"Index of\" \"DCIM\" ","date":"05-08-2023","objectID":"/google-dorks/:0:3","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Google Operators ","date":"05-08-2023","objectID":"/google-dorks/:1:0","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Basic Operators +, -, ., *, \"\", |, OR ","date":"05-08-2023","objectID":"/google-dorks/:1:1","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Advanced Operators allintext:, allintilte:, allinurl:, cache:, define:, filetype:, info:, intext:, intitle:, inurl:, link:, phonebook:, related:, site:, numrange: ","date":"05-08-2023","objectID":"/google-dorks/:1:2","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Advanced Operators “Filetype” find documents with specified extensions examples: Ethical Hacking filetype:txt Networking filetype:ppt site:owasp.org filetype:pdf ","date":"05-08-2023","objectID":"/google-dorks/:1:3","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"filtering Usernames and passwords Example: username password @facebook.com filetype:txt username password @gmail.com filetype:txt username password @yahoo.com filetype:txt username password @twitter.com filetype:txt ","date":"05-08-2023","objectID":"/google-dorks/:1:4","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Advanced Operators “Intitle” intitle: search_term find search term within the title of a webpage Example: intitle: owasp Allintitle: search_term1 search_term2 search_term3 find multiple search terms in the web pages with the title that includes all those words these operators are specifically used to find the directory lists Example: intitle: Index.of “parent directory” intitle: Index.of “movies” ","date":"05-08-2023","objectID":"/google-dorks/:1:5","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Hacking security cameras intitle:\"IVISTA.main.page\" \"please visit\" intitle:\"i-character console\" copyright \"icodesystems\" intitle:\"Live View / - AXIS | inurl:view/view.shtnl ","date":"05-08-2023","objectID":"/google-dorks/:1:6","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Advanced Operators “Inurl:” inurl:search_term find search term in url. allinurl: search_term1 search_term2 search_term3 find multiple search terms in a url. Examples: inurl: admin allinurl: admin login ","date":"05-08-2023","objectID":"/google-dorks/:1:7","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Hacking Printers inurl:websearch/mainframe.cgi ","date":"05-08-2023","objectID":"/google-dorks/:1:8","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"hacking webcam inurl:main.cgilinksys inurl:\"viewframe?mode=motion\" inurl:view/index.shtml inurl:\"toshibaNetwork Camera\" User Login inurl:/view.shtml ","date":"05-08-2023","objectID":"/google-dorks/:1:9","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Advanced Operators “Intext” intext: search_term find search term in the text body of a document. allintext: search_term1 search_term2 search_term3 find multiple search terms in the text body of a document. Example: intext: Password allintext: Admininstrator login site:owasp.org intext:SQL ","date":"05-08-2023","objectID":"/google-dorks/:1:10","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Advanced Operators “cache:” Cache: URL Find the older version of website in google cache sometimes, even the site has already been updated, the old information might be found in cache Examples: cachedview.com web.archive.org ","date":"05-08-2023","objectID":"/google-dorks/:1:11","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Advanced operators “link:” link: URL find the web pages having a link to the specified url. Related: URL find the webpages that are similar to the specified web page info: URL present some information that google has about that web page define: search_term provide a defination of the words gathered from various online sources Examples: link: abc.com related: abc.com info: abc.com define: abc.com ","date":"05-08-2023","objectID":"/google-dorks/:1:12","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Want to see private information index.of.DCIMindex.of.backup ","date":"05-08-2023","objectID":"/google-dorks/:1:13","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"find only pakistani websites site:.pk admin login ","date":"05-08-2023","objectID":"/google-dorks/:1:14","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"google hacking database [GHDB] www.exploit-db.com ","date":"05-08-2023","objectID":"/google-dorks/:1:15","tags":["C"],"title":"Google Dorks","uri":"/google-dorks/"},{"categories":["Cyber Security"],"content":"Here i will help you in your jr penetration tester pathway on THM. ","date":"05-08-2023","objectID":"/jr-penetration-tester/:0:0","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Introduction to Cyber Security ","date":"05-08-2023","objectID":"/jr-penetration-tester/:1:0","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Intro to Offensive Security Task 1: Hacking your first machine Q1. When you’ve transferred money to your account, go back to your bank account page. What is the answer shown on your bank balance page? Ans-BANK-HACKED Q2. If you were a penetration tester or security consultant, this is an exercise you’d perform for companies to test for vulnerabilities in their web applications; find hidden pages to investigate for vulnerabilities. No Answer Needed Q3. Terminate the machine by clicking the red “Terminate” button at the top of the page. No Answer Needed Task 2: What is Offensive Security? No answer needed Task 3: Careers in cyber security No answer needed ","date":"05-08-2023","objectID":"/jr-penetration-tester/:1:1","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Intro to Defensive Security Task 1: Introduction to Defensive Security Which team focuses on defensive security? Ans-Blue Team Task 2: Areas of Defensive Security What would you call a team of cyber security professionals that monitors a network and its systems for malicious events? Ans- Security Operations Center What does DFIR stand for? Ans- Digital Forensics and Incident Response Which kind of malware requires the user to pay money to regain access to their files? Ans- ransomware Task 3: Practical Example of Defensive Security What is the flag that you obtained by following along? Ans- THM{THREAT-BLOCKED} ","date":"05-08-2023","objectID":"/jr-penetration-tester/:1:2","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Careers in Cyber Task 1: Introduction Task 2: Security Analyst ","date":"05-08-2023","objectID":"/jr-penetration-tester/:1:3","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Introduction to Pentesting ","date":"05-08-2023","objectID":"/jr-penetration-tester/:2:0","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Pentesting Fundamentals Task 1: What is Penetration Testing? No Answer Needed. Task 2: Penetration Testing Ethics q1. You are given permission to perform a security audit on an organisation; what type of hacker would you be? Ans- White Hat Q2. You attack an organisation and steal their data, what type of hacker would you be? Ans- Black Hat Q3. What document defines how a penetration testing engagement should be carried out? Ans- Rules of Engagement Task 3: Penetration Testing Methodologies Q1. What stage of penetration testing involves using publicly available information? Ans- Information Gathering Q2. If you wanted to use a framework for pentesting telecommunications, what framework would you use? Note: We’re looking for the acronym here and not the full name. Ans- OSSTMM Q3. What framework focuses on the testing of web applications? Ans- OWASP Task 4: Black box, White box, Grey box Penetration Testing Q1. You are asked to test an application but are not given access to its source code - what testing process is this? Ans- Black Box Q2.You are asked to test a website, and you are given access to the source code - what testing process is this? Ans- White Box Task 5: Practical: ACME Penetration Test Q1. Complete the penetration test engagement against ACME’s infrastructure. Ans- THM{PENTEST_COMPLETE} ","date":"05-08-2023","objectID":"/jr-penetration-tester/:2:1","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Principles of Security Task 1: Introduction No Answer Needed. Task 2: The CIA Triad Q1. What element of the CIA triad ensures that data cannot be altered by unauthorised people? Ans- integrity Q2. What element of the CIA triad ensures that data is available? Ans- availability Q3. What element of the CIA triad ensures that data is only accessed by authorised people? Ans- confidentiality Task 3: Principles of Privileges Q1. What does the acronym “PIM” stand for? Ans- Privileged Identity Management Q2. What does the acronym “PAM” stand for? Ans- Privileged Access Management Q3. If you wanted to manage the privileges a system access role had, what methodology would you use? Ans- PAM Q4. If you wanted to create a system role that is based on a users role/responsibilities with an organisation, what methodology is this? Ans- PIM Task 4: Security Models Continued Q1. What is the name of the model that uses the rule “can’t read up, can read down”? Ans- the bell-lapadula model Q2. What is the name of the model that uses the rule “can read up, can’t read down”? Ans- the biba model Q3. If you were a military, what security model would you use? Ans- the bell-lapadula model Q4. If you were a software developer, what security model would the company perhaps use? Ans- the biba model Task 5: Threat Modelling \u0026 Incident Response Q1. What model outlines “Spoofing”? Ans- stride Q2. What does the acronym “IR” stand for? Ans- incident response Q3. You are tasked with adding some measures to an application to improve the integrity of data, what STRIDE principle is this? Ans- tampering Q4. An attacker has penetrated your organisation’s security and stolen data. It is your task to return the organisation to business as usual. What incident response stage is this? Ans- recovery ","date":"05-08-2023","objectID":"/jr-penetration-tester/:2:2","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Introduction to Web Hacking ","date":"05-08-2023","objectID":"/jr-penetration-tester/:3:0","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Walking An Application Task 1: Walking An Application No Answer Needed. Task 2: Exploring The Website No Answer Needed. Task 3: Viewing The Page Source Q1. What is the flag from the HTML comment? Ans- THM{HTML_COMMENTS_ARE_DANGEROUS} Q2. What is the flag from the secret link? Ans- THM{NOT_A_SECRET_ANYMORE} Q3. What is the directory listing flag? Ans- THM{INVALID_DIRECTORY_PERMISSIONS} Q4. What is the framework flag? Ans- THM{KEEP_YOUR_SOFTWARE_UPDATED} Task 4: Developer Tools - Inspector Q1. What is the flag behind the paywall? Ans- THM{NOT_SO_HIDDEN} Task 5: Developer Tools - Debugger Q1. What is the flag in the red box? Ans- THM{CATCH_ME_IF_YOU_CAN} Task 6: Developer Tools - Network Q1. What is the flag shown on the contact-msg network request? Ans- THM{GOT_AJAX_FLAG} ","date":"05-08-2023","objectID":"/jr-penetration-tester/:3:1","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Content Discovery Task 1: What Is Content Discovery? Q1. What is the Content Discovery method that begins with M? Ans- Manually Q2. What is the Content Discovery method that begins with A? Ans- Automated Q3. What is the Content Discovery method that begins with O? Ans- OSINT Task 2: Manual Discovery - Robots.txt Q1. What is the directory in the robots.txt that isn’t allowed to be viewed by web crawlers? Ans- /staff-portal Task 3: Manual Discovery - Favicon Q1. What framework did the favicon belong to? Ans- cgiirc Task 4: Manual Discovery - Sitemap.xml What is the path of the secret area that can be found in the sitemap.xml file? Ans- /s3cr3t-area Task 5: Manual Discovery - HTTP Headers Q1. What is the flag value from the X-FLAG header? Ans- THM{HEADER_FLAG} Task 6: Manual Discovery - Framework Stack Q1. What is the flag from the framework’s administration portal? Ans- THM{CHANGE_DEFAULT_CREDENTIALS} Task 7: OSINT - Google Hacking / Dorking Q1. What Google dork operator can be used to only show results from a particular site? Ans- site: Task 8: OSINT - Wappalyzer Q1. What online tool can be used to identify what technologies a website is running? Ans- Wappalyzer Task 9: OSINT - Wayback Machine Q1. What is the website address for the Wayback Machine? Ans- https://archive.org/web/ Task 10: OSINT - GitHub Q1. What is Git? Ans- version control system Task 11: OSINT - S3 Buckets Q1. What URL format do Amazon S3 buckets end in? Ans- .s3.amazonaws.com Task 12: Automated Discovery Q1. What is the name of the directory beginning “/mo….” that was discovered? Ans- /monthly Q2. What is the name of the log file that was discovered? Ans- /development.log ","date":"05-08-2023","objectID":"/jr-penetration-tester/:3:2","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Subdomain Enumeration Task 1: Brief Q1. What is a subdomain enumeration method beginning with B? Ans- Brute Force Q2. What is a subdomain enumeration method beginning with O? Ans- OSINT Q3. What is a subdomain enumeration method beginning with V? Ans- Virtual Host Task 2: OSINT - SSL/TLS Certificates Q1. What domain was logged on crt.sh at 2020-12-26? Ans- store.tryhackme.com Task 3: OSINT - Search Engines Q1. What is the TryHackMe subdomain beginning with B discovered using the above Google search? Ans- blog.tryhackme.com Task 4: DNS Bruteforce Q1. What is the first subdomain found with the dnsrecon tool? Ans- api.acmeitsupport.thm Task 5: OSINT - Sublist3r Q1. What is the first subdomain discovered by sublist3r? Ans- web55.acmeitsupport.thm Task 6: Virtual Hosts Q1. What is the first subdomain discovered? Ans- delta Q2. What is the second subdomain discovered? Ans- yellow ","date":"05-08-2023","objectID":"/jr-penetration-tester/:3:3","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Burp Suite ","date":"05-08-2023","objectID":"/jr-penetration-tester/:4:0","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"Burp Suite: The Basics Task 1: Introduction Ans-No answer needed. Task 2: What is Burp Suite? Q1. Which edition of Burp Suite runs on a server and provides constant scanning for target web apps? Ans- Burp Suite Enterprise Q2. Burp Suite is frequently used when attacking web applications and ______ applications. Ans- Mobile Task 3: Features of Burp Community Q1. Which Burp Suite feature allows us to intercept requests between ourselves and the target? Ans- Proxy Q2. Which Burp tool would we use to brute-force a login form? Ans- Intruder Task 4: Installation Q1. If you have chosen not to use the AttackBox, ensure that you have a copy of Burp Suite installed before proceeding. Ans- No answer needed Task 5: The Dashboard Q1. What menu provides information about the actions performed by Burp Suite, such as starting the proxy, and details about connections made through Burp? Ans- Event log Task 6: Navigation Q1. Which tab Ctrl + Shift + P will switch us to? Ans- Proxy tab Task 7: Options Q1. In which category can you find a reference to a “Cookie jar”? Ans- Sessions Q2. In which base category can you find the “Updates” sub-category, which controls the Burp Suite update behaviour? Ans- Suite Q3. What is the name of the sub-category which allows you to change the keybindings for shortcuts in Burp Suite? Ans- Hotkeys Q4. If we have uploaded Client-Side TLS certificates, can we override these on a per-project basis (yea/nay)? Ans- Yea Task 8: Introduction to the Burp Proxy Q1. Click me to proceed to the next task. Ans- No answer needed Task 9: Connecting through the Proxy (FoxyProxy) Q1. Click me to proceed to the next task. Ans- No answer needed Task 10: Site Map and Issue Definitions Q1. What is the flag you receive after visiting the unusual endpoint? Ans-THM{NmNlZTliNGE1MWU1ZTQzMzgzNmFiNWVk} ","date":"05-08-2023","objectID":"/jr-penetration-tester/:4:1","tags":["C"],"title":"THM Jr Penetration Tester Pathway Guide","uri":"/jr-penetration-tester/"},{"categories":["Cyber Security"],"content":"This is the write up for the room Upload Vulnerabilities on Tryhackme and it is part of the Web Fundamentals Path Upload Vulnerabilities Room link: https://tryhackme.com/room/uploadvulns Tools used: Burpsuite gobuster Wappalyser ","date":"08-07-2023","objectID":"/upload-vulnerabilities/:0:0","tags":["C"],"title":"Upload Vulnerabilities","uri":"/upload-vulnerabilities/"},{"categories":["Cyber Security"],"content":"Task 1 Getting Started Let’s deploy the machine to give it a few minutes to boot. click on the Start Machine button. now you have to configure your own pc. open host file on linux /etc/hosts on windows C:\\Windows\\System32\\drivers\\etc\\hosts ","date":"08-07-2023","objectID":"/upload-vulnerabilities/:1:0","tags":["C"],"title":"Upload Vulnerabilities","uri":"/upload-vulnerabilities/"},{"categories":["Cyber Security"],"content":"Task 2 Introduction The purpose of this room to explore some of the vulnerabilities resulting from improper handling of file uploads. We will be looking at: Overwriting existing files on a server Uploading and Executing Shells on a server Bypassing Client-Side filtering Bypassing various kinds of Server-Side filtering Fooling content type validation checks ","date":"08-07-2023","objectID":"/upload-vulnerabilities/:2:0","tags":["C"],"title":"Upload Vulnerabilities","uri":"/upload-vulnerabilities/"},{"categories":["Cyber Security"],"content":"Task 3 General Methodology ","date":"08-07-2023","objectID":"/upload-vulnerabilities/:3:0","tags":["C"],"title":"Upload Vulnerabilities","uri":"/upload-vulnerabilities/"},{"categories":["Cyber Security"],"content":"Task 4 Overwriting Existing Files Answer the questions below What is the name of the image file which can be overwritten? Ans: mountains.jpg Overwrite the image. What is the flag you receive? Ans: THM{OTBiODQ3YmNjYWZhM2UyMmYzZDNiZjI5} ","date":"08-07-2023","objectID":"/upload-vulnerabilities/:4:0","tags":["C"],"title":"Upload Vulnerabilities","uri":"/upload-vulnerabilities/"},{"categories":["DSA"],"content":"Python is used in automation of taskes. Note Use the table of contents to navigate to the portion that you are interested in. Introduction asdfghjklsdfghj Types bubble sort insertion sort merge sort quick sort selection sort ","date":"10-02-2024","objectID":"/sorting/:0:0","tags":["c","c++"],"title":"Sorting Algos","uri":"/sorting/"},{"categories":["DSA"],"content":"Bubble sort // 1. Bubble sort void BubbleSort(int *arr, int length) { for (int i = 0; i \u003c length - 1; i++) { for (int j = 0; j \u003c length - i - 1; j++) { if (arr[j] \u003e arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } } ","date":"10-02-2024","objectID":"/sorting/:1:0","tags":["c","c++"],"title":"Sorting Algos","uri":"/sorting/"},{"categories":["DSA"],"content":"Insertion Sort // 2. Insertion sort void InsertionSort(int *arr, int length) { for (int i = 1; i \u003c length; i++) { int value = arr[i]; int j = i - 1; while (j \u003e= 0 \u0026\u0026 arr[j] \u003e value) { arr[j + 1] = arr[j]; j--; } arr[j + 1] = value; } } ","date":"10-02-2024","objectID":"/sorting/:2:0","tags":["c","c++"],"title":"Sorting Algos","uri":"/sorting/"},{"categories":["DSA"],"content":"Merge Sort // 5. Merge Sort #include \u003cstdio.h\u003e int arr[] = {12, 6, 47, 65, 38, 24, 98, 75, 82, 13, 44, 37}; // global array Decleration for all the sorting Algorithum void merge(int *arr, int s, int e){ int mid = (s+e)/2; // finding midpoint of the array int len1 = mid - s + 1; //length of left part of the array int len2 = e - mid; // length of right part of the array // dynamic memory allocate int *first = new int[len1]; // left array int *second = new int[len2]; // right array // copy values in left part int mainArrayIndex = s; for (int i = 0; i \u003c len1; i++) { first[i] = arr[mainArrayIndex++]; } // copy values in right part mainArrayIndex = mid + 1; for (int i = 0; i \u003c len2; i++) { second[i] = arr[mainArrayIndex++]; } //merging 2 sorted arrays int index1 = 0; int index2 = 0; mainArrayIndex = s; while (index1 \u003c len1 \u0026\u0026 index2\u003c len2) { if (first[index1] \u003c second[index2]) { arr[mainArrayIndex++] = first[index1++]; } else{ arr[mainArrayIndex++] = second[index2++]; } } while (index1 \u003c len1) { arr[mainArrayIndex++] = first[index1++]; } while (index2 \u003c len2) { arr[mainArrayIndex++] = second[index2++]; } // free the memory delete []first; delete []second; } void mergesort(int *arr, int s, int e){ // base case if (s \u003e= e) { return; } // mid point int mid = (s+e)/2; // sorting left part mergesort(arr , s , mid); // sorting right part mergesort(arr , mid+1, e); // merging sorted arrays merge(arr , s, e); } // For Displaying the sorted array or unsorted also void Display(int *arr, int length) { for (int i = 0; i \u003c length; i++) { printf(\"%d \", arr[i]); } } int main() { // int arr[10]= {1,34,32,25,76,68,45,98,23,44}; int n=12; mergesort(arr , 0 , n-1); Display(arr,n); } ","date":"10-02-2024","objectID":"/sorting/:3:0","tags":["c","c++"],"title":"Sorting Algos","uri":"/sorting/"},{"categories":["DSA"],"content":"Quick Sort // 4. Quick Sort with partition code int partition(int *arr, int low, int high) { int pivot = arr[low]; int i = low + 1; int j = high; do { while (arr[i] \u003c= pivot) { i++; } while (arr[j] \u003e pivot) { j--; } if (i \u003c j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } while (i \u003c j); int value = arr[low]; arr[low] = arr[j]; arr[j] = value; return j; } void QuickSort(int *arr, int low, int high) { if (low \u003c high) { int partitionIndex = partition(arr, low, high); QuickSort(arr, low, partitionIndex - 1); QuickSort(arr, partitionIndex + 1, high); } } ","date":"10-02-2024","objectID":"/sorting/:4:0","tags":["c","c++"],"title":"Sorting Algos","uri":"/sorting/"},{"categories":["DSA"],"content":"Selection Sort void SelectionSort(int *arr, int length) { for (int i = 0; i \u003c length; i++) { int min_index = i; for (int j = i + 1; j \u003c length; j++) { if (arr[min_index] \u003e arr[j]) { min_index = j; } } if (min_index != i) { int temp = arr[i]; arr[i] = arr[min_index]; arr[min_index] = temp; } } } ","date":"10-02-2024","objectID":"/sorting/:5:0","tags":["c","c++"],"title":"Sorting Algos","uri":"/sorting/"},{"categories":["DSA"],"content":"Python is used in automation of taskes. Note Use the table of contents to navigate to the portion that you are interested in. Introduction Python is a beginner-friendly, interpreted programming language known for its readability and versatility. With a vast standard library and cross-platform compatibility, it’s widely used in web development, data science, and automation. ","date":"25-01-2024","objectID":"/python/:0:0","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Print function print(\"it's meeeeeeeeeeee\") print('o----') print(' ||||') print('*' * 10) output it's meeeeeeeeeeee o---- |||| ********** ","date":"25-01-2024","objectID":"/python/:0:1","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Datatype price = 10 # integer rating = 4.9 # floating name = 'sumit' # string is_present = False # boolean print(price) ","date":"25-01-2024","objectID":"/python/:0:2","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Input function name = input('what is your name? ') # taking input and store as a 'name' variable fav_colour = input('what is your favourite colour? ') print(name + ' likes ' + fav_colour) birth_year = input('Birth Year: ') print(type(birth_year)) age = 2023 - int(birth_year) print(type(age)) print(name + \"'s age is: \" + str(age)) weight_lbs = input('what is your weight(lbs): ') weight_kg = int(weight_lbs) * 0.45 print ('weight in kg is: ' + weight_kg) name = 'John Smith' age = 20 is_new_patient = True ","date":"25-01-2024","objectID":"/python/:0:3","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"String and character #formatted string first ='sumit' last = 'kr' message = first +'[' + last + '] is a programmer.' msg = f'{first} [{last}] is a coder' # \u003c---formated give same output as message print(message) output sumit [kr] is a programmer. ","date":"25-01-2024","objectID":"/python/:0:4","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Length of a string string = 'you are awesome.' print(len(string)) #general purpose function # output-\u003e 16 ","date":"25-01-2024","objectID":"/python/:0:5","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Converting lower case to uppercase compliment = 'You are awesome.' print(compliment.upper()) #method # output-\u003e YOU ARE AWESOME. print(compliment.lower()) #output-\u003e you are awesome. ","date":"25-01-2024","objectID":"/python/:0:6","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Returning the index of a character in a string statement = 'you are awesome.' print(statement.find('o')) # output-\u003e 1 ","date":"25-01-2024","objectID":"/python/:0:7","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Replacing a word in a string statement = 'hii this is sumit.' print(statement.replace('sumit','sumit kr')) # output-\u003e hii this is sumit kr. print(statement.replace('su','a')) #output-\u003e hii this is amit. ","date":"25-01-2024","objectID":"/python/:0:8","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Checking if the string contain a word or not statement = 'hii this is sumit.' print('sumit' in statement) #output-\u003e True ","date":"25-01-2024","objectID":"/python/:0:9","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Arithmatic operations print(10+3) # output-\u003e 13 print(10/3) # output-\u003e 3.333333 print(10//3) # output-\u003e 3 print(10%3) # output-\u003e 1 print(10 ** 3) # output-\u003e 1000 (ten to the power three) ","date":"25-01-2024","objectID":"/python/:0:10","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Augmanted assignment operator x= 10 x = x + 3 x += 3 # \u003c-- same as upper line which is 13 x -= 3 # output-\u003e 7 x *= 3 x /= 3 ","date":"25-01-2024","objectID":"/python/:0:11","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Presidence order parenthesis exponentiation 2**3 multiplication or division addition or subtraction x= 10 + 3 * 2 ** 2 #output-\u003e 22 x= (10 + 3) * 2 ** 2 #output-\u003e 56 ","date":"25-01-2024","objectID":"/python/:0:12","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Math function x= 2.9 print(round(x)) #output-\u003e 3 print(abs(-2.9)) # output-\u003e 2.9 (absolut function) import math # \u003c--math module in python print(math.ceil(2.9)) # output-\u003e 3 print(math.floor(2.9)) # output-\u003e 2 ","date":"25-01-2024","objectID":"/python/:0:13","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"If and else if statement is_hot = True is_cold = False if is_hot: print(\"It's a hot day\") print(\"drink plenty of water\") elif is_cold: print(\"its a cold day\") print(\"wear warm cloth\") else: print(\"its a lovely day\") output It,s a hot day drink plenty of water ","date":"25-01-2024","objectID":"/python/:0:14","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Task price = 1000000 has_good_credit = True if has_good_credit: down_payment = 0.1 * price else: down_payment = 0.2 * price print(f\"Down Payment: {down_payment}\") output 100000 ","date":"25-01-2024","objectID":"/python/:0:15","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Logical opoerators ","date":"25-01-2024","objectID":"/python/:0:16","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Task has_high_income = True has_good_credit = True if has_high_income and has_good_credit: # and operator both condition should be true print(\"Eligible for loan\") else: print(\"not eligible for loan\") # output-\u003e Eligible for loan has_high_income = True has_good_credit = False if has_high_income or has_good_credit: # or operator print(\"Eligible for loan\") else: print(\"not eligible for loan\") # output-\u003e Eligible for loan has_good_credit = True has_criminal_record = False if has_good_credit and not has_criminal_record: # not operator print(\"Eligible for loan\") else: print(\"not eligible for loan\") output Eligible for loan ","date":"25-01-2024","objectID":"/python/:0:17","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Comparision operator , \u003c , \u003e= , \u003c= , == , != ","date":"25-01-2024","objectID":"/python/:0:18","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Task temperature = 30 if temperature \u003e= 30: print(\"it's a hot day\") elif temperature \u003c 30: print(\"it's a cold day\") output it's a hot day ","date":"25-01-2024","objectID":"/python/:0:19","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Task name = input(\"enter name: \") if len(name) \u003c 3: print(\"name should be greater than 3.\") elif len(name) \u003e 30: print(\"should be less than 30 characters.\") else: print('looks good.') ","date":"25-01-2024","objectID":"/python/:0:20","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"While loops i = 1 while i \u003c= 5: print('*' * i) i= i +1 print('Done') output * ** *** **** ***** Done ","date":"25-01-2024","objectID":"/python/:0:21","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Task: Guess number secreat_number = 9 guess_count = 0 guess_limit = 3 while guess_count \u003c guess_limit: guess = int(input('Guess: ')) guess_count += 1 if guess == secreat_number: print('you are right.') break else: print('sorry you failed') ","date":"25-01-2024","objectID":"/python/:0:22","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Task: Car game command = \" \" started = False while True: command = input(\"\u003e \").lower() if command == \"start\": if started: print(\"Car is already started!\") else: started = True print(\"Car started...\") elif command == \"stop\": if not started: print(\"Car is already stopped!\") else: print(\"Car stopped.\") started = False elif command == \"quit\": break elif command == \"help\": print(\"\"\" start - to start the car stop - to stop the car quit - to quit \"\"\") else: print(\"Sorry, I don't understand that.\") ","date":"25-01-2024","objectID":"/python/:0:23","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"For loop for item in 'python': print(item) for item in ['balram','sumit', 'prateek', 'shams']: print(item) for item in [1,2,3,4]: print(item) for item in range(10): # range-\u003e builtin fun print(item) # output-\u003e 0 to 9 for item in range(5,10): print(item) # output-\u003e 5 to 9 for item in range(5,10,2): print(item) # output-\u003e 5,7,9 ","date":"25-01-2024","objectID":"/python/:0:24","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Task prices = [10,20,30] total = 0 for price in prices: total = total + price print(f\"Total: {total}\") # output-\u003e 60 ","date":"25-01-2024","objectID":"/python/:0:25","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Nested loop adding one loop in the another loop for x in range(4): for y in range(3): print(f'({x},{y})') ","date":"25-01-2024","objectID":"/python/:0:26","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Task numbers = [5,2,5,2,2] # method 1 for x_count in numbers: print('x' * x_count) # method 2 for x_count in numbers: output = '' for count in range(x_count): output += 'x' print(output) output xxxxx xx xxxxx xx xx xxxxx xx xxxxx xx xx ","date":"25-01-2024","objectID":"/python/:0:27","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Lists names = ['arjun', 'kaishar', 'saif', 'prateek', 'sumit'] print(names) # output-\u003e ['arjun', 'kaishar', 'saif', 'prateek', 'sumit'] print(names[2]) # output-\u003e saif print(names[-1]) # output-\u003e sumit print(names[2:]) # output-\u003e ['saif', 'prateek', 'sumit'] print(names[2:4]) # output-\u003e ['saif', 'prateek'] ","date":"25-01-2024","objectID":"/python/:0:28","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Task: Largest no find the largest number in the list numbers = [2,3,6,7,4,9,10] max = numbers[0] for item in numbers: if item \u003e max: max = item print(max) # output-\u003e 10 ","date":"25-01-2024","objectID":"/python/:0:29","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"2D lists matrix = [ [1,2,3], [4,5,6], [7,8,9] ] print(matrix[0][1]) # output-\u003e 2 matrix[0][1] = 20 print(matrix[0][1]) # output-\u003e 20 for row in matrix: for item in row: print(item) # output-\u003e 1 to 9 in seperate line ","date":"25-01-2024","objectID":"/python/:0:30","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"List methods numbers = [5,2,1,7,4] numbers.append(20) print(numbers) # output-\u003e [5,2,1,7,4,20] numbers.insert(0, 10) print(numbers) # output-\u003e [10,5,2,1,7,4,20] numbers.remove(5) print(numbers) # output-\u003e [10,2,1,7,4,20] numbers.clear() print(numbers) # output-\u003e [] numbers = [5,2,1,7,4] numbers.pop() # output-\u003e [5, 2, 1, 7] print(numbers) numbers = [5,2,1,7,4] print(numbers.index(5)) # output-\u003e 0 # print(numbers.index(50)) # output-\u003e 50 is not in the list print(50 in numbers) # output-\u003e False numbers = [5, 2, 1, 5, 7, 4] print(numbers.count(5)) # output-\u003e 2 numbers.sort() print(numbers) # output-\u003e [1, 2, 4, 5, 5, 7] numbers.reverse() print(numbers) # output-\u003e [7, 5, 5, 4, 2, 1] numbers2 = numbers.copy() numbers.append(10) print(numbers) # output-\u003e [7, 5, 5, 4, 2, 1, 10] print(numbers2) # output-\u003e [7, 5, 5, 4, 2, 1] ","date":"25-01-2024","objectID":"/python/:0:31","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Task: Remove duplicates write a program to remove the duplicates in a list. numbers = [2, 2, 4, 6, 3, 4, 6, 1] uniques = [] for number in numbers: if number not in uniques: uniques.append(number) print(uniques) # output-\u003e [2, 4, 6, 3, 1] ","date":"25-01-2024","objectID":"/python/:0:32","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Tuples similar to list. we dont have append or insert method here. we also dont have remove, clear, pop. we have count, index numbers = (1,2,3) # cant be modified print(numbers[0]) # output-\u003e 1 number[0] = 10 # output-\u003e error message ","date":"25-01-2024","objectID":"/python/:0:33","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Unpacking coordinates = (1,2,3) x = coordinates[0] y = coordinates[1] z = coordinates[2] x, y, z = coordinates print(x) # output-\u003e 1 print(y) # output-\u003e 2 print(z) # output-\u003e 3 ","date":"25-01-2024","objectID":"/python/:0:34","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Dictionaries customer = { \"name\": \"sumit kr\", \"age\": 30, \"is_verified\": True } print(customer[\"name\"]) # output-\u003e sumit kr customer[\"name\"] = \"Sumit\" print(customer[\"name\"]) # output-\u003e Sumit customer[\"birthdate\"] = jan 1 2002 print(customer[\"birthdate\"]) # output-\u003e jan 1 2002 ","date":"25-01-2024","objectID":"/python/:0:35","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Task: Digits to word translate digits to words phone = input(\"Phone: \") digits_mapping = { \"1\": \"One\", \"2\": \"Two\", \"3\": \"Three\", \"4\": \"Four\", \"5\": \"Five\", \"6\": \"Six\", \"7\": \"Seven\", \"8\": \"Eight\", \"9\": \"Nine\", \"0\": \"Zero\" } output = \"\" for ch in phone: output += digits_mapping.get(ch, \"!\") + \" \" print(output) output \u003ePhone: 123456 One Two Three Four Five Six ","date":"25-01-2024","objectID":"/python/:0:36","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":"Emoji Converter :) message = input(\"\u003e\") words = message.split(' ') emojis = { \":)\": \" \" \":(\": \" \" } To be continued….. ","date":"25-01-2024","objectID":"/python/:0:37","tags":["python"],"title":"Python Basic Syntax","uri":"/python/"},{"categories":["DSA"],"content":" Note Use the table of contents to navigate to the portion that you are interested in. ","date":"15-02-2023","objectID":"/oops/:0:0","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Introduction Object-oriented-programing(oops) is it inc the readability, extansability, managability of the code. ","date":"15-02-2023","objectID":"/oops/:1:0","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Class it is user defined data type just like int char or other datatypes. it contains the properties of a class or we can say data members. we can access datamembers by using “.” operator. class can be created as follows: class Hero { //properties public: int health; char level; } ","date":"15-02-2023","objectID":"/oops/:1:1","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"object it is an instance of class just like variable if we create an object with empty class then it takes i byte of memory class test{ }; ","date":"15-02-2023","objectID":"/oops/:2:0","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Inheritance Inheritance is a process through which derived class acquires all the properties and behaviours of its parent class automatically. create new class from existing class. new class inherits the features of base or parent class and have additional features of its own. Syntax: class child_class: access_modifier parent_class{ // body of the child class }; access modifier public private protected ","date":"15-02-2023","objectID":"/oops/:3:0","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Types of Inheritance There are mainly 5 type of inheritance: single inheritance multiple inheritance multilevel inheritance hierarchical inheritance hybrid inheritance ","date":"15-02-2023","objectID":"/oops/:4:0","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Single Inheritance When one class inherits another class ","date":"15-02-2023","objectID":"/oops/:4:1","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Multiple inheritance Multiple inheritance is the process of deriving a new class that inherits the attributes from two or more classes ","date":"15-02-2023","objectID":"/oops/:4:2","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Encapsulation Wrapping of data members and methods into a single unit is called Encapsulation. ","date":"15-02-2023","objectID":"/oops/:5:0","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Abstraction ","date":"15-02-2023","objectID":"/oops/:6:0","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Polymorphism ","date":"15-02-2023","objectID":"/oops/:7:0","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Compiletime Polymorphism ","date":"15-02-2023","objectID":"/oops/:7:1","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Runtime polymorphism ","date":"15-02-2023","objectID":"/oops/:7:2","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Constructor ","date":"15-02-2023","objectID":"/oops/:8:0","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Default ","date":"15-02-2023","objectID":"/oops/:8:1","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Parameterized ","date":"15-02-2023","objectID":"/oops/:8:2","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Copy ","date":"15-02-2023","objectID":"/oops/:8:3","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Destructor ","date":"15-02-2023","objectID":"/oops/:9:0","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Access Specifiers IMP : The access specifiers are used to define how functions and variables can be accessed outside the class. There are three types of access specifiers: ","date":"15-02-2023","objectID":"/oops/:10:0","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"1. Private: Functions and variables declared as private can be accessed only within the same class, and they cannot be accessed outside the class they are declared. ","date":"15-02-2023","objectID":"/oops/:10:1","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"2. Public: Functions and variables declared under public can be accessed from anywhere. ","date":"15-02-2023","objectID":"/oops/:10:2","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"3. Protected: Functions and variables declared as protected cannot be accessed outside the class except a child class. This specifier is generally used in inheritance. ","date":"15-02-2023","objectID":"/oops/:10:3","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Delete It is used to release a unit of memory. ","date":"15-02-2023","objectID":"/oops/:10:4","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Delete[] It is used to release an array. ","date":"15-02-2023","objectID":"/oops/:10:5","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Virtual Inheritance It facilitates you to create only one copy of each object even if the object appears more than one in the hierarchy. ","date":"15-02-2023","objectID":"/oops/:10:6","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Overloading Overloading is a static binding whereas overriding is dynamic binding, overloading is nothing but the same method with different arguments, and it may or may not return the same value in the same class itself. ","date":"15-02-2023","objectID":"/oops/:10:7","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Function overloading Function Overloading is defined as we can have more than one version of the same function. The versions of a function will have different signatures meaning that they have different set of parameters. ","date":"15-02-2023","objectID":"/oops/:10:8","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Operator overloading Operator overloading is defined as the standard operator can be redefined so that it has a different meaning when applied to the instances of a class. ","date":"15-02-2023","objectID":"/oops/:10:9","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["DSA"],"content":"Overriding Overriding is the same method name with the same arguments and return types associated with the class and its child class. ","date":"15-02-2023","objectID":"/oops/:10:10","tags":["C","C++"],"title":"Oops(object oriented programming)","uri":"/oops/"},{"categories":["Web Dev"],"content":"Js is powerful, flexible and fast programming language. it is used in web development. It provides the dynamic behavior to the website. Note Use the table of contents to navigate to the portion that you are interested in. ","date":"17-07-2025","objectID":"/javascript/:0:0","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Fundamental of Js Js is powerful, flexible and fast programming language. it is used in web development. It provide the dynamic behavior to the website. ","date":"17-07-2025","objectID":"/javascript/:1:0","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Console It is a keyword refer to an object. There are methods built into console object one of them is .log() method. When we write console.log() it will print the wriiten information in paranthesis to the console. ","date":"17-07-2025","objectID":"/javascript/:1:1","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Comment As we write JavaScript, we can write comments in our code that the computer will ignore as our program runs. These comments exist just for human readers. Single line comment: A single-line comment will comment out a single line and is denoted with two forward slashes // preceding it. // Prints 5 to the console console.log(5); Multi-line comment A multi-line comment will comment out multiple lines and is denoted with /* to begin the comment, and */ to end the comment. /* This is all commented console.log(10); None of this is going to run! console.log(99); */ ","date":"17-07-2025","objectID":"/javascript/:1:2","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Data types In js there are 8 fundamental data types Number : Any numerical value including decimal numbers. Ex: 4,8,80,60.65 Bigint: Any number, greater than 2^53 -1 or less than -(2^53 -1), with n appended to the number. Ex: 1234567890123456n. String: a group of characters (letters, numbers,spaces,symbols etc) surrounded by single quotes '...' or double quotes \"...\". Ex: hello, world Boolean: It has only two possible value true and false without quotes. Null: It represent the absence of a value and it is represented by null keyword. Undefined: It is denoted by keyword undefined without quotes.it means that a given value does not exist. Symbol: Symbols are unique identifiers, useful in more complex coding. Object: Objects are collection of related data. Note The first 7 datatype are consider as primitive data types and objects are non-primitive datatype. Primitive types are simple, fixed values, while non-primitive types are more flexible and store collections or structured data. ","date":"17-07-2025","objectID":"/javascript/:1:3","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Arithmatic Operators It performs a task in our code. Js has several built-in arithmetic operators that allow us to perform mathematical calculations on numbers. Add: + Subtract: - Multiply: * Divide: / Remainder: % console.log(3 + 4); // Prints 7 console.log(5 - 1); // Prints 4 console.log(4 * 2); // Prints 8 console.log(9 / 3); // Prints 3 console.log(11 % 3); // Prints 2 console.log(12 % 3); // Prints 0 ","date":"17-07-2025","objectID":"/javascript/:1:4","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"string concatenation the process of appending one string to the another is called concatenation. When a + operator is used on two strings, it appends the right string to the left string: console.log(\"hi\" + \"ya\"); // Prints \"hiya\" console.log(\"wo\" + \"ah\"); // Prints \"woah\" console.log(\"I love to \" + \"code.\") // Prints \"I love to code.\" ","date":"17-07-2025","objectID":"/javascript/:1:5","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Properties All datatypes have access to specific properties that are passed down to each instance. which are created in the js code. Ex: .length console.log(\"Hello\".length); // Prints 5 ","date":"17-07-2025","objectID":"/javascript/:1:6","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"methods methods are actions we can perform. Datatypes have access to specific methods that allow us to handle instance of that data type. console.log(\"hello\".toUpperCase()); // Prints \"HELLO\" console.log(\"Hey\".startsWith(\"H\")); // Prints true ","date":"17-07-2025","objectID":"/javascript/:1:7","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Built in objects In addition to console, there are other objects built into JavaScript. Ex: Math is a built in object that performs more complex mathematical operations than arithmetic. console.log(Math.random()); // Prints a random number between 0 and 1 console.log(Math.floor(Math.random() * 50)); // Prints a random whole number between 0 and 50 ","date":"17-07-2025","objectID":"/javascript/:1:8","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Javascript variables A variable is a container for a value. Informations are stored in variables. It provide a way of labeling data with a descriptive name. Redeclare Reassign var ✅ ✅ let ❌ ✅ const ❌ ❌ ","date":"17-07-2025","objectID":"/javascript/:2:0","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Create a variable using var Before es6 version of js we could only use var keyword to declare variables. Var is short for variable. In given example Arya is stored in a variable labeled as myName. var myName = \"Arya\"; console.log(myName); // Output: Arya Rules for creating a variable: Can’t start with number Variable name are case sensitive Cant be same as keywords ","date":"17-07-2025","objectID":"/javascript/:2:1","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Create a variable using let Let and const are introduced in es6. Let keyword signals that the variable can be reassigned a diff value later on. let meal = \"Enchiladas\"; console.log(meal); // Output: Enchiladas meal = \"Burrito\"; console.log(meal); // Output: Burrito Note If we don’t assign a value to a variable declared using the let keyword it automatically has a value of undefined. We can reassign the value in let. Can not be redeclare. ","date":"17-07-2025","objectID":"/javascript/:2:2","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Create a variable using const The const keyword was also introduced in ES6, and is short for the word constant. However, a const variable cannot be reassigned because it is constant. const myName = \"Gilberto\"; console.log(myName); // Output: Gilberto Warning If we try to reassign a const variable, we’ll get a TypeError. Constant variables must be assigned a value when declared. If we try to declare a const variable without a value, we’ll get a SyntaxError. ","date":"17-07-2025","objectID":"/javascript/:2:3","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"mathematical assignment operator let w = 4; w += 1; console.log(w); // Output: 5 let x = 20; x -= 5; // Can be written as x = x - 5 console.log(x); // Output: 15 let y = 50; y *= 2; // Can be written as y = y * 2 console.log(y); // Output: 100 let z = 8; z /= 2; // Can be written as z = z / 2 console.log(z); // Output: 4 ","date":"17-07-2025","objectID":"/javascript/:2:4","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"the increment and decrement operator Other mathematical assignment operators include the increment operator (++) and decrement operator (–).The increment operator will increase the value of the variable by 1. The decrement operator will decrease the value of the variable by 1. For example: let a = 10; a++; console.log(a); // Output: 11 let b = 20; b--; console.log(b); // Output: 19 ","date":"17-07-2025","objectID":"/javascript/:2:5","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"string concatenation with variable let myPet = \"armadillo\"; console.log(\"I own a pet \" + myPet + \".\"); // Output: \"I own a pet armadillo.\" ","date":"17-07-2025","objectID":"/javascript/:2:6","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"String interpolation In the ES6 version of JavaScript, we can insert, or interpolate, variables into strings using template literals. A template literal is wrapped by backticks `. it inc the redability of the code. const myPet = \"armadillo\"; console.log(`I own a pet ${myPet}.`); // Output: I own a pet armadillo. ","date":"17-07-2025","objectID":"/javascript/:2:7","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Typeof operator If we need to check the data type of a variable’s value, we can use the typeof operator. The typeof operator checks the value to its right and returns, or passes back, a string of the data type. const unknown1 = \"foo\"; console.log(typeof unknown1); // Output: string const unknown2 = 10; console.log(typeof unknown2); // Output: number const unknown3 = true; console.log(typeof unknown3); // Output: Boolean ","date":"17-07-2025","objectID":"/javascript/:2:8","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Js control flow A conditional statement checks a specific condition(s) and performs a task based on the condition(s). ","date":"17-07-2025","objectID":"/javascript/:3:0","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"If statement In programming, we can also perform a task based on a condition using an if statement: if (true) { console.log(\"This message will print!\"); } // Prints: This message will print! ","date":"17-07-2025","objectID":"/javascript/:3:1","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"If…Else statements If we wanted to add some default behavior to the if statement, we can add an else statement to run a block of code when the condition evaluates to false. An else statement must be paired with an if statement, and together they are referred to as an if…else statement. if (false) { console.log(\"The code in this block will not run.\"); } else { console.log(\"But the code in this block will!\"); } // Prints: But the code in this block will! ","date":"17-07-2025","objectID":"/javascript/:3:2","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Comparison operaor sometimes we need to use different types of operators to compare values. These operators are called comparison operators. Comparison operators compare the value on the left with the value on the right. Here is a list of some handy comparison operators and their syntax: Less than: \u003c Greater than: \u003e Less than or equal to: \u003c= Greater than or equal to: \u003e= Is equal to: === Is not equal to: !== ","date":"17-07-2025","objectID":"/javascript/:3:3","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Logical operators Working with conditionals means that we will be using boolean true or false values. In JavaScript, there are operators that work with boolean values known as logical operators There are three logical operators: the and operator (\u0026\u0026) the or operator (||) the not operator, otherwise known as the bang operator (!) if (stopLight === \"green\" \u0026\u0026 pedestrians === 0) { console.log(\"Go!\"); } else { console.log(\"Stop\"); } if (day === \"Saturday\" || day === \"Sunday\") { console.log(\"Enjoy the weekend!\"); } else { console.log(\"Do some work.\"); } let excited = true; console.log(!excited); // Prints false let sleepy = false; console.log(!sleepy); // Prints true ","date":"17-07-2025","objectID":"/javascript/:3:4","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Truthy and Falsy The list of falsy values includes: 0 Empty strings like \"\" or \"\" null, which represents when there is no value at all undefined, which represents when a declared variable lacks a value NaN, or Not a Number ","date":"17-07-2025","objectID":"/javascript/:3:5","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Truthy and Falsy Assignment let username = \"\"; let defaultName; if (username) { defaultName = username; } else { defaultName = \"Stranger\"; } console.log(defaultName); // Prints: Stranger ","date":"17-07-2025","objectID":"/javascript/:3:6","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"ternary operator In the spirit of using short-hand syntax, we can use a ternary operator to simplify an if…else statement. Take a look at the if…else statement example: let isNightTime = true; if (isNightTime) { console.log(\"Turn on the lights!\"); } else { console.log(\"Turn off the lights!\"); } We can use a ternary operator to perform the same functionality: isNightTime ? console.log(\"Turn on the lights!\") : console.log(\"Turn off the lights!\"); The condition, isNightTime, is provided before the ?. Two expressions follow the ? and are separated by a colon :. If the condition evaluates to true, the first expression executes. If the condition evaluates to false, the second expression executes. ","date":"17-07-2025","objectID":"/javascript/:3:7","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Else if statement We can add more conditions to our if...else with an else if statement. The else if statement allows for more than two possible outcomes. You can add as many else if statements as you’d like, to make more complex conditionals! let stopLight = \"yellow\"; if (stopLight === \"red\") { console.log(\"Stop!\"); } else if (stopLight === \"yellow\") { console.log(\"Slow down.\"); } else if (stopLight === \"green\") { console.log(\"Go!\"); } else { console.log(\"Caution, unknown!\"); } ","date":"17-07-2025","objectID":"/javascript/:3:8","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"The switch keyword A switch statement provides an alternative syntax that is easier to read and write. A switch statement looks like this: let groceryItem = \"papaya\"; switch (groceryItem) { case \"tomato\": console.log(\"Tomatoes are $0.49\"); break; case \"lime\": console.log(\"Limes are $1.49\"); break; case \"papaya\": console.log(\"Papayas are $1.29\"); break; default: console.log(\"Invalid item\"); break; } // Prints \"Papayas are $1.29\" ","date":"17-07-2025","objectID":"/javascript/:3:9","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Functions A function is a reusable block of code that groups together a sequence of statements to perform a specific task. ","date":"17-07-2025","objectID":"/javascript/:4:0","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Function Declaration In js there are many way to create a function one of them is function declaration. Just like how a variable declaration binds a value to a variable name, a function declaration binds a function to a name, or an identifier. Take a look at the anatomy of a function declaration below: greetWorld(); // Output: Hello, World! function greetWorld() { console.log(\"Hello, World!\"); } A function declaration consists of: The function keyword. The name of the function, or its identifier, followed by parentheses. A function body, or the block of statements required to perform a specific task, enclosed in the function’s curly brackets, { }. ","date":"17-07-2025","objectID":"/javascript/:4:1","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Calling a function The code inside the function body will only be run when it is called. To call a function type the function name followed by parentheses. ","date":"17-07-2025","objectID":"/javascript/:4:2","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Parameters and arguments Parameters allows function to accept inputs and perform task. We use parameters as placeholders for information that will be passed to the function when it is called. The values that are passed to the function when it is called are called arguments. Arguments can be passed to the function as values or variables. function sayThanks( name) { console.log(\"Thank you for your purchase, \"+ name + \"! We appreciate your business.\" ); } sayThanks(\"Cole\"); ","date":"17-07-2025","objectID":"/javascript/:4:3","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Default parameter One of the features added in ES6 is the ability to use default parameters. Default parameters allow parameters to have a predetermined value in case no argument is passed into the function or if the argument is undefined when called. function greeting (name = \"stranger\") { console.log(`Hello, ${name}!`) } greeting(\"Nick\") // Output: Hello, Nick! greeting() // Output: Hello, stranger! ","date":"17-07-2025","objectID":"/javascript/:4:4","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Return When a function is called, the computer will run through the function’s code and evaluate the result. By default, the resulting value is undefined. function rectangleArea(width, height) { let area = width * height; } console.log(rectangleArea(5, 7)) // Prints undefined ","date":"17-07-2025","objectID":"/javascript/:4:5","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Helper function We can also use the return value of a function inside another function. These functions being called within another function are often referred to as helper functions. function multiplyByNineFifths(number) { return number * (9/5); }; function getFahrenheit(celsius) { return multiplyByNineFifths(celsius) + 32; }; getFahrenheit(15); // Returns 59 ","date":"17-07-2025","objectID":"/javascript/:4:6","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"function expression Another way to define a function is to use a function expression. To define a function inside an expression, we can use the function keyword. In a function expression, the function name is usually omitted. A function with no name is called an anonymous function. A function expression is often stored in a variable in order to refer to it. const plantNeedsWater = function(day){ if(day === \"Wednesday\"){ return true; }else{ return false; } } console.log(plantNeedsWater(\"Tuesday\")) ","date":"17-07-2025","objectID":"/javascript/:4:7","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"arrow functions ES6 introduced arrow function syntax, a shorter way to write functions by using the special “fat arrow” () =\u0026gt; notation. Arrow function remove the need to type out the keyword function every time we create a function. Instead, we first include the parameters inside the ( ) and then add an arrow =\u003e that points to the function body surrounded in { } like this: const rectangleArea = (width, height) =\u0026gt; { let area = width * height; return area; }; ","date":"17-07-2025","objectID":"/javascript/:4:8","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Concise body arrow function JavaScript also provides several ways to refactor arrow function syntax. The most condensed form of the function is known as concise body. We’ll explore a few of these techniques below: Functions that take only a single parameter do not need that parameter to be enclosed in parentheses. However, if a function takes zero or multiple parameters, parentheses are required. A function body composed of a single-line block does not need curly braces. Without the curly braces, whatever that line evaluates will be automatically returned. The contents of the block should immediately follow the arrow =\u003e, and the return keyword can be removed. This is referred to as implicit return. const squareNum = (num) =\u0026gt; { return num * num; }; const squareNum = num =\u0026gt; num * num; ","date":"17-07-2025","objectID":"/javascript/:4:9","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"javascript scope An important idea in programming is scope. Scope defines where variables can be accessed or referenced. Scope is the context in which our variables are declared. ","date":"17-07-2025","objectID":"/javascript/:5:0","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Global scope In global scope, variables are declared outside of blocks. These variables are called global variables. Because global variables are not bound inside a block, they can be accessed by any code in the program, including code in blocks. const color = \"blue\"; const returnSkyColor = () =\u0026gt; { return color; // blue }; console.log(returnSkyColor()); // blue ","date":"17-07-2025","objectID":"/javascript/:5:1","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"block scope The next context we’ll cover is block scope. When a variable is defined inside a block, it is only accessible to the code within the curly braces {}. We say that a variable has block scope because it is only accessible to the lines of code within that block. Variables declared with block scope are known as local variables because they are only available to the code that is part of the same block. const logSkyColor = () =\u0026gt; { let color = \"blue\"; console.log(color); // Prints \u0026quot;blue\u0026quot; }; logSkyColor(); // Prints \u0026quot;blue\u0026quot; console.log(color); // throws a ReferenceError ","date":"17-07-2025","objectID":"/javascript/:5:2","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"scope pollution Scope pollution occurs when we have too many variables in the global namespace, or when we reuse variables across different scopes. Scope pollution makes it difficult to keep track of our different variables and sets us up for potential accidents. let num = 50; const logNum = () =\u0026gt; { num = 100; // Take note of this line of code console.log(num); }; logNum(); // Prints 100 console.log(num); // Prints 100 practice good scoping ","date":"17-07-2025","objectID":"/javascript/:5:3","tags":["js"],"title":"Java Script Part 1","uri":"/javascript/"},{"categories":["Web Dev"],"content":"Navigation system works on the concept of linked list. Note Use the table of contents to navigate to the portion that you are interested in. ","date":"17-07-2025","objectID":"/nodejs/:0:0","tags":["js"],"title":"Node Js","uri":"/nodejs/"},{"categories":["Web Dev"],"content":"1. Introduction: Node js is a runtime environment for java script. we can run js code outside the browser by using nodejs. Ryan Dahl embedd the v8 chromium engine with c++. Which allows to run js. we can create webservers in js language. Node js is not a framwork nor a library. It is open-source cross platform. ","date":"17-07-2025","objectID":"/nodejs/:1:0","tags":["js"],"title":"Node Js","uri":"/nodejs/"},{"categories":["Web Dev"],"content":"Installation and Setup go to nodejs.org. There are two option LTS(long term support or stable) and current(beta version). even versionaing for the stable release and odd versioning for testing or beta release. to check version node --version ","date":"17-07-2025","objectID":"/nodejs/:2:0","tags":["js"],"title":"Node Js","uri":"/nodejs/"},{"categories":["Web Dev"],"content":"npm Node package manager, when we install node js it automatically installed npm. it manages the packages which can be installed and maintained and update. ","date":"17-07-2025","objectID":"/nodejs/:3:0","tags":["js"],"title":"Node Js","uri":"/nodejs/"},{"categories":["Web Dev"],"content":"1st node js program: hello world how to run js file node hello.js ","date":"17-07-2025","objectID":"/nodejs/:4:0","tags":["js"],"title":"Node Js","uri":"/nodejs/"},{"categories":["Web Dev"],"content":"npm init it initialise the project with proper configuration. it creates the package.json file which contains all the package with version and meta data. ","date":"17-07-2025","objectID":"/nodejs/:4:1","tags":["js"],"title":"Node Js","uri":"/nodejs/"},{"categories":["Web Dev"],"content":"Modules in node js every js file is a module. In production there are several funcions we have to create several files to maintain the code effectively.There will be so many such js files. ","date":"17-07-2025","objectID":"/nodejs/:5:0","tags":["js"],"title":"Node Js","uri":"/nodejs/"},{"categories":["Web Dev"],"content":"how to include pakage using require function we can include external pakages or modules. const math = require(\"math\"); it will find pakage in built-in package or module. const math = require(\"./math\"); it will find pakage in the current directory. ","date":"17-07-2025","objectID":"/nodejs/:5:1","tags":["js"],"title":"Node Js","uri":"/nodejs/"},{"categories":["Web Dev"],"content":"File handling in nodejs it simply means creating a file and read the file. There is a built-in function to handle the file is fs ex const fs = require(“fs”); // sync fs.writeFileSync(\"./test.txt\",“hey there”); // it will create a file with name test.txt with content hey there. //async only diff is it contain callback function fs.writeFile(\"./test.txt\", “hello world”, (arr)=\u003e{}) const result = fs.readFileSync(\"./contacts.txt\",“utf-8”); //async fs.readFile(\"./contact.txt\", “utf-8”, (err,result)=\u003e{ if(err){ console.log(“error”,err); } else{ console.log(result); } }) fs.appendFileSync(\"./test.txt\", hey there); ","date":"17-07-2025","objectID":"/nodejs/:6:0","tags":["js"],"title":"Node Js","uri":"/nodejs/"},{"categories":["Web Dev"],"content":"Node js architecture","date":"17-07-2025","objectID":"/nodejs/:7:0","tags":["js"],"title":"Node Js","uri":"/nodejs/"},{"categories":["Web Dev"],"content":"Navigation system works on the concept of linked list. Note Use the table of contents to navigate to the portion that you are interested in. ","date":"25-05-2024","objectID":"/css/:0:0","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"1. Introduction ","date":"25-05-2024","objectID":"/css/:1:0","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"What is CSS? Cascading Style Sheet, often abbreviated as CSS is a stylesheet language used to describe the look and formatting of a document written in HTML. ","date":"25-05-2024","objectID":"/css/:1:1","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Why use CSS? CSS allows you to apply different styles to different elements in your HTMML document. It gives you control over the visual presentation of your site and helps to separate the design from the content. Improves site maintenance, ensure consistency, and allows for site-wide changes with minimal effort. ","date":"25-05-2024","objectID":"/css/:1:2","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Basic CSS Syntax A CSS rule-set consists of a selector and a declaration block. The selector points to the HTML element you want to style, and the declaration block contains one or more declarations separated by semicolon. selector { property: value; } ","date":"25-05-2024","objectID":"/css/:1:3","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Applying CSS to HTML inline CSS : With this method, you use the style attribute directly within an HTML tag to apply CSS. Internal CSS : This involves placing CSS rules within \u003cstyle\u003e tags in the HTML document’s \u003chead\u003e section. External CSS : This is the most common way to apply CSS. Styles are placed in a separate .css file which is then linked to the HTML document using the \u003clink\u003e element. ","date":"25-05-2024","objectID":"/css/:1:4","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Inline CSS Inline CSS is used to apply a unique style to a single HTML element. It uses the style attribute of an HTML element. This method of insertion applies the CSS rules directly into the HTML file. \u003cp style=\"color:blue;\"\u003eThis is a paragraph with inline css.\u003c/p\u003e output of above HTML code This is a paragraph with inline css. ","date":"25-05-2024","objectID":"/css/:1:5","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Internal CSS Internak CSS, also known as embedded CSS, is used to apply CSS to a whole HTML page. The CSS rules are put in a \u003cstyle\u003e block in the \u003chead\u003e section of the HTML file. \u003cstyle\u003e p { color: red; } \u003c/style\u003e ","date":"25-05-2024","objectID":"/css/:1:6","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"External CSS External css involves creating a separate .css file and linking it to your HTML document. This method of insertion aids in minimizing code redundancy and promotes reusability. Example: First create an external css file inside your project folder.(styles.css) p{ color: green; } Then, link this css file to your HTML document. \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003clink rel=\"stylesheet\" href=\"style.css\"\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eThis is a paragraph with external css.\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e ","date":"25-05-2024","objectID":"/css/:1:7","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"CSS Comments Comments in CSS are used to explain your code and can help you and others understand the purpose of the code. All CSS comments start with /* and end with */, and anything between these will be ignored by the browser. /* this is a single line comment */ /* this is a multi-line comment */ p{ color: blue; font-size: 20px; margin: 30px; } ","date":"25-05-2024","objectID":"/css/:1:8","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"2. CSS Selectors ","date":"25-05-2024","objectID":"/css/:2:0","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"CSS selectors Selectors are the means by which CSS identifies which HTML elements to style. Here are some basic types of selectors: Tag selectors : Selects HTML elements based on the element (tag) name. ID selectors : Selects a specific element based on its unique ID. Class selectors : Selects elements based on their class attribute. Attribute selectors : Selects elements based on an attribute or attribute value. Pseudo-class selectors : Selects elements based on a certain state. Pseudo-elements selectors : Select elements based on their position in the document. ","date":"25-05-2024","objectID":"/css/:2:1","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"CSS properties and values Once you’ve selected an element, you can apply styles to it using properties and values. Properties are what you want to style, and values are the styles that you apply to those properties. Here’s how you can use the different types of selectors in CSS: Tag Selector Class Selector /* Tag Selector */ p { color: blue; } /* Class Selector */ .my-class { font-size: 20px; } ","date":"25-05-2024","objectID":"/css/:2:2","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"CSS selectors ID Selector Universal Selector Attribute selector Pseudo-class selectors /* ID Selector */ #myID { background-color: yellow; } /* Universal Selector */ *{ margin: 0; padding: 0; } /* Attribute selector */ [type=\"text\"] { border: 1px solid green; } /* Pseudo-class selectors */ p:hover { color: blue; } ","date":"25-05-2024","objectID":"/css/:2:3","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"CSS combinators In CSS, combinators are used to explain the relationship between two selectors. There are four different combinators in CSS: descendant selector (space) child selector (\u003e) adjacent sibling selector (+) general sibling selector (~) /* descendant selector (space) */ div p { background-color: yellow; } /* child selector (\u003e) */ div \u003e p { background-color: blue; } /* adjacent sibling selector (+) */ div + p { background-color: red; } /* general sibling selector (~) */ div~p { background-color: green; } ","date":"25-05-2024","objectID":"/css/:2:4","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"3. CSS Specificity ","date":"25-05-2024","objectID":"/css/:3:0","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Calculate specificity Inline styles: An inline style attribute present on an element will override any styles in external stylesheets and will have the highest level of specificity. IDs: Each unique ID will add to the specificity. Classes, pseudo-classes, and attributes: Each unique class, pseudo-class, or attribute will add to the specificity. Elements and pseudo-elements: Each unique element or pseudo-element will add to the specificity The specificity is calculated as follows: 1000 for inline styling 100 for each ID value 10 for each class value (or pseudo-class or attribute selector) 1 for each element selector or pseudo-element body #content .data { background-color: blue; } Equal specificity: the latest rule wins - If the same rule is written twice into the external style sheet, then the latest rule wins: h1 {color: blue;} h1 {color: red;} ","date":"25-05-2024","objectID":"/css/:3:1","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"4. Absolute and Relative Units ","date":"25-05-2024","objectID":"/css/:4:0","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Absolute units Absolute units are fixed-length units. They represent a physical measurement and don’t scale based on any other factors like the size of the viewport or parent element. The absolute units in CSS are: Pixels (px) Points (pt) Inches (in) Centimeters (cm) and Millimeters (mm) Picas (pc) ","date":"25-05-2024","objectID":"/css/:4:1","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Relative units Relative units are scaled quantities. They are relative to another length value, like the size of the viewport or the size of the parent element.\\ Relative units in CSS are: Percentages (%) Viewport Width (vw) Viewport Height (vh) em rem Viewport Minimum (vmin) Viewport Maximum (vmax) ","date":"25-05-2024","objectID":"/css/:4:2","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"5. CSS Colors ","date":"25-05-2024","objectID":"/css/:5:0","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Named colors CSS has a predefined set of named colors. color: red; color: orange; color: tan; color: rebeccapurple; color: transparent; /* Example usage: */ p { color: red; } ","date":"25-05-2024","objectID":"/css/:5:1","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"HEX Values Hexadecimal (HEX) color values are based on the combination of red, green, and blue (RGB) values in a base-16 format. A HEX color code starts with a hash # followed by 6 characters - two for red, two for green, and two for blue. Example usage: body { background-color: #FF5733; /* A shade of orange */ } ","date":"25-05-2024","objectID":"/css/:5:2","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"RGB Values Colors can be defined using the rgb function, where values for red, green, and blue are provided in the range of 0-255. Example usage: div { color: rgb(0,0,0); * This is black * } ","date":"25-05-2024","objectID":"/css/:5:3","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"RGBA Values RGBA is similar to RGB but has an additional value for alpha (A) representing opacity. The alpha value is between 0 (completely transparent) and 1 (fully opaque). Example usage: div { background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black */ } ","date":"25-05-2024","objectID":"/css/:5:4","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"HSL Values HSL stands for Hue, Saturation, and Lightness. It offers a more intuitive way to pick colors. Example: button { background-color: hsl (120, 100%, 50%); /* Pure green */ } ","date":"25-05-2024","objectID":"/css/:5:5","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"HSLA Values Like RGBA, HSLA includes an alpha value for opacity. Example: button { background-color: hsla(120, 100%, 50%, 0.5); } ","date":"25-05-2024","objectID":"/css/:5:6","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"6. CSS Box Model ","date":"25-05-2024","objectID":"/css/:6:0","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"The Box Model In CSS, each HTML element is considered as a box that consists of margins, borders, padding, and the actual content. This is known as the “box model”. Content Padding Border Margin ","date":"25-05-2024","objectID":"/css/:6:1","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Controlling Box Model Properties It’s important to note that by default, the total width and height of an element is calculated as: Total width = width + left padding + right padding + left border + right border + left margin + right margin Total height = height + top padding + bottom padding + top border + bottom border + top margin + bottom margin ","date":"25-05-2024","objectID":"/css/:6:2","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Box Sizing CSS offers a property called box-sizing which can change this calculation. If you set box-sizing: border-box;, any padding or border specified in CSS will be included in the width or height of the element. \u003cdiv class=\"box1\"\u003eHello, world!\u003c/div\u003e \u003cdiv class=\"box2\"\u003eHello, world!\u003c/div\u003e \u003cstyle\u003e .box1 { width: 200px; padding: 10px; border: 5px solid black; margin: 20px; } .box2 { box-sizing: border-box; width: 200px; padding: 10px; border: 5px solid black; margin: 20px; } \u003c/style\u003e output of above HTML code Box 1 Box 2 ","date":"25-05-2024","objectID":"/css/:6:3","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Width and Height The width and height properties set the width and height of an element. Example: div { width: 500px; height: 200px; } ","date":"25-05-2024","objectID":"/css/:6:4","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Min/Max Variations The max-width and min-width properties set the maximum and minimum widths of an element, while the max-height and min-height set the maximum and minimum heights. Example: div { width: 100%; min-width: 300px; max-width: 600px; min-height: 150px; max-height: 300px; } ","date":"25-05-2024","objectID":"/css/:6:5","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"CSS Margins Margins are used in CSS to create space around elements, outside of any defined borders. With CSS, you have full control over the margins. There are properties for setting the margin for each side of an element (top, right, bottom, and left). Example: p { margin-top: 50px; margin-right: 150px; margin-bottom: 100px; margin-left: 200px; } /* Shorthands: */ p { margin: 50px 150px 100px 200px; /* top right bottom left */ } p { margin: 50px 150px; /* vertical horizontal */ } ","date":"25-05-2024","objectID":"/css/:6:6","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"CSS Borders Borders in CSS can be applied to most elements within HTML. They can be used to define a boundary around an element, for visual appeal, or to separate different sections of a webpage. Example: p { border-style: solid; /* style of the border */ border-width: 1px; /* width of the border */ border-color: red; /* color of the border */ } /* Shorthand: */ p { border: 1px solid red; } output of above HTML code this is a paragraph of text. ","date":"25-05-2024","objectID":"/css/:6:7","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"CSS Padding Padding is the space that’s inside the element between the element and the border. Padding goes around all four sides of the content and you can target and change the padding for each side with CSS (just like the margin). Example: p { padding-top: 50px; padding-right: 150px; padding-bottom: 100px; padding-left: 200px; } /* Shorthand: */ p { padding: 50px 150px 100px 200px; } ","date":"25-05-2024","objectID":"/css/:6:8","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"7. CSS Floats ","date":"25-05-2024","objectID":"/css/:7:0","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Floating The CSS float property is used to push an element to the left or right, allowing other elements to wrap around it. Floating elements are taken out of the normal flow of a document and shifted to the left or right as far as they can go. ","date":"25-05-2024","objectID":"/css/:7:1","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Using the float property The float property can have one of the following values: left right none \u003cdiv style=\"width: 400px\"\u003e \u003cimg src=\"home.png\" style=\"float:left; padding-right:10px;\" alt=\"test image\" width=\"200\" /\u003e \u003cp\u003e Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis odio reiciendis, libero tempora saepe, quae maiores officia expedita temporibus, doloribus dolor eveniet asperiores. Quos molestiae recusandae eos est nulla. Unde. \u003c/p\u003e \u003c/div\u003e output of above HTML code Lorem ipsum dolor sit amet consectetur adipisicing elit. Quis odio reiciendis, libero tempora saepe, quae maiores officia expedita temporibus, doloribus dolor eveniet asperiores. Quos molestiae recusandae eos est nulla. Unde. ","date":"25-05-2024","objectID":"/css/:7:2","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Clearing Floats When you use the float property, you may encounter issues where elements overlap or layout is broken. To prevent these issues, You can use the clear property. none left right both ","date":"25-05-2024","objectID":"/css/:7:3","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"using css overflow to clear floats The overflow property with the value hidden can also be used to clear floats, if you apply it to the parent element of a floated element like in the example below. .container { overflow: hidden; } ","date":"25-05-2024","objectID":"/css/:7:4","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"08 CSS Positioning CSS offers the position property, which helps to define how an element is positioned on a page. It can have one of the following values: static : This is the default value. Relative : The element is positioned relative to its normal position. Fixed : The element is positioned relative to the browser window. It will not move even if the page is scrolled. Absolute : The element is positioned relative to the nearest positioned ancestor. Sticky : The element is positioned based on the user’s scroll position. ","date":"25-05-2024","objectID":"/css/:7:5","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"09 CSS Centering Elements ","date":"25-05-2024","objectID":"/css/:8:0","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Centering Elements Horizontally .center-block{ display: block; margin-left: auto; margin-right: auto; width: 50%; /* or any specific width */ } ","date":"25-05-2024","objectID":"/css/:8:1","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Centering Elements Vertically \u003cdiv class=\"relative-parent\"\u003e \u003cdiv\u003e relative parent \u003c/div\u003e \u003cdiv class=\"absolute-child\"\u003e absolute child \u003c/div\u003e \u003c/div\u003e .relative-parent { position: relative; width: 100%; height: 160px; height: 160px; border: 3px dashed powderblue; } .absolute-child { width: 160px; height: 100px; margin: 0 auto; position: absolute; top: 50%; left: 0; right: 0; transform: translateY(-50%); background-color: crimson; } output of above HTML code relative parent absolute child ","date":"25-05-2024","objectID":"/css/:8:2","tags":["html","css"],"title":"CSS Part 1","uri":"/css/"},{"categories":["Web Dev"],"content":"Navigation system works on the concept of linked list. Note Use the table of contents to navigate to the portion that you are interested in. ","date":"25-05-2024","objectID":"/html/:0:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"1. Introduction: ","date":"25-05-2024","objectID":"/html/:1:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"What is HTML? HTML, which stands for Hypertext Markup Language. It is the standard markup language used in creating web pages. It is the backbone of any website and is used to format the content on the web page. Web pages created with HTML can include text, images, links, forms, audio, video and more. HTML is not a programming language, meaning it does not have logic like if…else statements or loops. It is a markup language and is used to structure content on the web. ","date":"25-05-2024","objectID":"/html/:1:1","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"What is a website? A website is essentially a folder which contains HTML, CSS and javascript documents as well as images, videos, audios, texts and more… ","date":"25-05-2024","objectID":"/html/:1:2","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Basic HTML structure \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eMy first webpage\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003ewelcome to my site!\u003c/h1\u003e \u003cp\u003ethis is the content of the webpage.\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e ","date":"25-05-2024","objectID":"/html/:1:3","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Basic HTML syntax standard HTML Elements Self closing HTML Elements \u003ch1\u003eSome text\u003c/h1\u003e \u003cimg src=\"path-to-image.jpg\" /\u003e ","date":"25-05-2024","objectID":"/html/:1:4","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"2. HTML elements ","date":"25-05-2024","objectID":"/html/:2:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Heading and paragraphs HTML provides six levels of headings, from \u003ch1\u003e to \u003ch6\u003e. These tags are used to create headings of different sizes and provide a visual hierarchy to your content. The \u003cp\u003e tag is used to define paragraphs of text. It separates blocks of text and helps maintain readability and organization. \u003ch1\u003eThis is a h1 heading\u003c/h1\u003e \u003ch2\u003eThis is a h2 heading\u003c/h2\u003e \u003ch3\u003eThis is a h3 heading\u003c/h3\u003e \u003ch4\u003eThis is a h4 heading\u003c/h4\u003e \u003ch5\u003eThis is a h5 heading\u003c/h5\u003e \u003ch6\u003eThis is a h6 heading\u003c/h6\u003e \u003cp\u003eThis is a paragraph of text.\u003c/p\u003e output of above HTML code This is a h1 heading This is a h2 heading This is a h3 heading This is a h4 heading This is a h5 heading This is a h6 heading This is a paragraph of text. ","date":"25-05-2024","objectID":"/html/:2:1","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Lists HTML offers two types of lists: ordered lists \u003col\u003e and unordered lists \u003cul\u003e. Ordered lists are used for items with a specific order or sequence, while unordered lists are used for items without a particular order. Each list item is defined using the \u003cli\u003e tag. \u003cul\u003e \u003cli\u003eItem 1\u003c/li\u003e \u003cli\u003eItem 2\u003c/li\u003e \u003cli\u003eItem 3\u003c/li\u003e \u003c/ul\u003e output of above HTML code Item 1 Item 2 Item 3 ","date":"25-05-2024","objectID":"/html/:2:2","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Tables Tables \u003ctable\u003e are used to organize tabular data. They consist of rows \u003ctr\u003e and cells \u003ctd\u003e. Tables help present data in a structured format. \u003ctable\u003e \u003ctr\u003e \u003ctd\u003eCell 1\u003c/td\u003e \u003ctd\u003eCell 2\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eCell 3\u003c/td\u003e \u003ctd\u003eCell 4\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e output of above HTML code Cell 1 Cell 2 Cell 3 Cell 4 ","date":"25-05-2024","objectID":"/html/:2:3","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Divs The \u003cdiv\u003e element is a versatile container that allows you to group and style sections of your webpage. It provides flexibility in organizing and styling content. It is primarily used for creating sections and grouping elements. \u003cdiv\u003e \u003ch2\u003eSection Title\u003c/h2\u003e \u003cp\u003eThis is another paragraph inside a div.\u003c/p\u003e \u003c/div\u003e output of above HTML code Section Title This is another paragraph inside a div. ","date":"25-05-2024","objectID":"/html/:2:4","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Span The \u003cspan\u003e element is a versatile inline container that allows you to group and style specific sections of text or inline elements. It is primarily used for targeting and styling specific sections of text or inline elements within your HTML content. \u003cp\u003e HTML is \u003cspan style=\"color:red;\"\u003eawesome\u003c/span\u003e! \u003cspan style=\"color:red;\"\u003eSpan elements\u003c/span\u003ecan be used for inline styling. \u003c/p\u003e output of above HTML code HTML is awesome! Span elementscan be used for inline styling. ","date":"25-05-2024","objectID":"/html/:2:5","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Comments in HTML Comments in HTML allow you to leave notes in yout code that are ignored by the browser. \u003c!-- this comment explains what the following code does.--\u003e \u003cp\u003ethis paragraph contains some text.\u003c/p\u003e output of above HTML code this paragraph contains some text. ","date":"25-05-2024","objectID":"/html/:2:6","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Block and inline elements Block-Level Elements: Block-level elements start on a new line and occupy the full width available by default. Examples of block-level elements include \u003cdiv\u003e, \u003cp\u003e, \u003ch1\u003e to \u003ch6\u003e, \u003cul\u003e, \u003cli\u003e, and \u003csection\u003e. Block-level elements create a visual block or box-like structure. Block-level elements can contain other block-level and inline-level elements. They are commonly used for structuring and grouping content, creating sections, and adding vertical spacing. Inline-Level Elements: Inline-level elements do not start on a new line and only occupy the necessary width to render their content. Examples of inline-level elements include \u003cspan\u003e, \u003ca\u003e, \u003cstrong\u003e, \u003cem\u003e, \u003cimg\u003e, and \u003cinput\u003e. Inline-level elements flow within the surrounding text and do not create line breaks. Inline-level elements cannot contain block-level elements but can contain other inline-level elements. They are commonly used for styling or adding emphasis within a line of text or to create inline links or images. ","date":"25-05-2024","objectID":"/html/:2:7","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"3. HTML Attributes ","date":"25-05-2024","objectID":"/html/:3:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Attribute basics All HTML elements can have attribute, but some attributes can be applied to all elements and some are specific to particular elements. Attributes provide additional information about elements. Attributes are always specified in the start tag. Attributes usually come in name/value pairs like: name=\"value\". Attributes values ate case sensitive, which means that class=\"some-name\" is not the same as class=\"some-Name\". ","date":"25-05-2024","objectID":"/html/:3:1","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Class attribute The class attribute is used to assign a specific class to an element. It is primarily used for styling purposes. \u003ch1 class=\"main-heading\"\u003eThis is a h1 heading.\u003c/h1\u003e ","date":"25-05-2024","objectID":"/html/:3:2","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"ID attribute The id attribute provides a unique identifier for an element on a webpage. It allows to target and manipulate specific elements using JavaScript and CSS. \u003ch1 id=\"main-heading\"\u003eThis is a h1 heading\u003c/h1\u003e Each id must be unique within the HTML document. ","date":"25-05-2024","objectID":"/html/:3:3","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Src attribute The src attribute is used with \u003cimg\u003e tag to specify the source URL of an image. It enables you to display images on your webpage. \u003cimg src=\"images/image1.jpg\" /\u003e ","date":"25-05-2024","objectID":"/html/:3:4","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Alt attribute The alt attribute is used with the \u003cimg\u003e tag to provide alternative text for an image. It is displayed if the image fails to load or for accessibility purpose, enabling screen readers to describe the image to visually impaired users. \u003cimg src=\"images/image1.jpg\" alt=\"my image\" /\u003e ","date":"25-05-2024","objectID":"/html/:3:5","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Href attribute The href attribute is used with \u003ca\u003e tag to specify the destination URL or location of a hyperlink. It allows you to create clickable links that navigate to other web pages or sections within the same page. \u003ca href=\"https://www.example.com/about.html\" \u003eAbout\u003c/p\u003e ","date":"25-05-2024","objectID":"/html/:3:6","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Title attribute The title attribute specifies extra information about the element. The information is most often shown as a tooltip text when the mouse moves over the element. \u003ca href=\"https://www.example.com/about.html\" title=\"This is an about page\"\u003eAbout\u003c/p\u003e ","date":"25-05-2024","objectID":"/html/:3:7","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Style attribute The style attribute specifies an inline style for an element. It will override any style set globally, eg. styles specified in the \u003cstyle\u003e tag or in an external style sheet. The style attribute can also be used in any HTML element. \u003ch1 style=\"color:blue; text-align:center; \"\u003ethis is a header.\u003c/h1\u003e \u003cp style=\"color:green;\"\u003eThis is a paragraph.\u003c/p\u003e ","date":"25-05-2024","objectID":"/html/:3:8","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"4. HTML Links🔗 ","date":"25-05-2024","objectID":"/html/:4:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Text links Text links are created using \u003ca\u003e anchor tag. The text within the anchor tags become clickable, directing users to the specified URL. To create a text link, use the following format: \u003ca href=\"destination_url\"\u003e Link Text \u003c/a\u003e ","date":"25-05-2024","objectID":"/html/:4:1","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Image links We can also create link using images. To make an image clickable, place the \u003cimg\u003e tag within the \u003ca\u003e tags. Here is the format: \u003ca href=\"destination_url\" \u003e \u003cimg src=\"image_source\" alt=\"Image Description /\u003e \u003c/a\u003e ","date":"25-05-2024","objectID":"/html/:4:2","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Absolute URL An absolute URL specifies the complete web address, including the protoclol (https://). \u003ca href=\"https://www.google.com\" title=\"visit google\"\u003evisit google.com\u003c/a\u003e ","date":"25-05-2024","objectID":"/html/:4:3","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Relative URL A Relative URL specifies the path to the file or location relative to the current webpage. example: “about.html” or “../contact.html” \u003ca href=\"contact.html\"\u003econtact\u003c/a\u003e ","date":"25-05-2024","objectID":"/html/:4:4","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Linking to a specific page section To link to a specific section within the same webpage. you can use anchor links. Anchor links allow user to jump directly to a particular section by clicking on a link. They are created using the id attribute to identify the target with a preceding # symbol Example: \u003ca href=\"#section2\"\u003eGo to section 2\u003c/a\u003e \u003c!-- in this case, the id attribute section2 should be assigned to the target section --\u003e \u003csection id=\"section2\" \u003e \u003ch2\u003eSection 2\u003c/h2\u003e \u003cp\u003ethis is the second section of the webpage.\u003c/p\u003e \u003c/section\u003e ","date":"25-05-2024","objectID":"/html/:4:5","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Linking to a specific page section on another page \u003ca href=\"./about-page.html#section2\"\u003e Go to section 2 on the about page \u003c/a\u003e ","date":"25-05-2024","objectID":"/html/:4:6","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Additional Link Attribute target : Specifies how the link opens. for example, you can set target=\"_blank\" to open the link in the new tab or window. download : Specifies that the linked resourse should be downloaded when clicked. it is commonly used for file downloads. \u003ca href=\"https://www.example.com/some-pdf.pdf\" target=\"_blank\" download\u003e Download pdf \u003c/a\u003e ","date":"25-05-2024","objectID":"/html/:4:7","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"5. HTML Lists📝 ","date":"25-05-2024","objectID":"/html/:5:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Unordered lists Unordered lists \u003cul\u003e are used to present items without a specific order or sequence. Each item in the list is defined using \u003cli\u003e (list item) tag. \u003cul\u003e \u003cli\u003eitem 1\u003c/li\u003e \u003cli\u003eitem 2\u003c/li\u003e \u003cli\u003eitem 3\u003c/li\u003e \u003c/ul\u003e output of above HTML code item 1 item 2 item 3 ","date":"25-05-2024","objectID":"/html/:5:1","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Ordered lists Ordered lists\u003col\u003e are used for items that have specific order or sequence. Like unordered lists, each item is defined using \u003cli\u003e tag. \u003col\u003e \u003cli\u003eItem 1\u003c/li\u003e \u003cli\u003eItem 2\u003c/li\u003e \u003cli\u003eItem 3\u003c/li\u003e \u003c/ol\u003e output of above HTML code Item 1 Item 2 Item 3 ","date":"25-05-2024","objectID":"/html/:5:2","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Nested lists HTML allows you to nest lists within lists to create hierarchical structures. This is achieved by placing a complete list structure inside an individual list item \u003cli\u003e. this technique is useful for creating subcategories or multi-level lists. \u003ch2\u003eNested Lists\u003c/h2\u003e \u003cul\u003e \u003cli\u003elist item 1 \u003cul\u003e \u003cli\u003elist item 1.1\u003c/li\u003e \u003cli\u003elist item 1.2\u003c/li\u003e \u003cli\u003elist item 1.3\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003elist item 2\u003c/li\u003e \u003cli\u003elist item 3\u003c/li\u003e \u003c/ul\u003e output of above HTML code Nested Lists list item 1 list item 1.1 list item 1.2 list item 1.3 list item 2 list item 3 ","date":"25-05-2024","objectID":"/html/:5:3","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Styling lists HTML lists can be customized and styled using css styles, you can change the apperance of list markers, adjust spacing, and create unique visual representations. ul { list-style-type: square; margin-left: 20px; } ol { list-style-type: upper-roman; margin-left: 30px; } ","date":"25-05-2024","objectID":"/html/:5:4","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"6. HTML Tables🗓️ ","date":"25-05-2024","objectID":"/html/:6:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Basic table structure Tables in HTML are created using the \u003ctable\u003e element. Inside the \u003ctable\u003e element, we have rows defined by the \u003ctr\u003e (table row) element. Within each row we define table headers using the \u003cth\u003e (table header) element or table cells using the \u003ctd\u003e (table data) element. \u003ch2\u003eBasic Table Structure\u003c/h2\u003e \u003ctable\u003e \u003ctr\u003e \u003cth\u003eHeader 1\u003c/th\u003e \u003cth\u003eHeader 2\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eCell 1\u003c/td\u003e \u003ctd\u003eCell 2\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eCell 3\u003c/td\u003e \u003ctd\u003eCell 4\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e output of above HTML code Basic Table Structure Header 1 Header 2 Cell 1 Cell 2 Cell 3 Cell 4 ","date":"25-05-2024","objectID":"/html/:6:1","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Table headers Table headers \u003cth\u003e are used to define the headings of each column in a table. By default, table headers are bold and centered. They help provide context and improve the readability of the table. \u003ch2\u003eTable headers\u003c/h2\u003e \u003ctable\u003e \u003ctr\u003e \u003cth\u003eName\u003c/th\u003e \u003cth\u003eEmail\u003c/th\u003e \u003cth\u003ePhone\u003c/th\u003e \u003c/tr\u003e \u003c!-- more rows --\u003e \u003c/table\u003e output of above HTML code Table headers Name Email Phone ","date":"25-05-2024","objectID":"/html/:6:2","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Table cells Table cells \u003ctd\u003e hold the actual data within a table. Each cell corresponds to a specific row and column intersection. Table cells provide the content for each column in the table. \u003ctable\u003e \u003ctr\u003e \u003cth\u003eName\u003c/th\u003e \u003cth\u003eEmail\u003c/th\u003e \u003cth\u003ePhone\u003c/th\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003esumit\u003c/td\u003e \u003ctd\u003esumit2011kmr@gmail.com\u003c/td\u003e \u003ctd\u003e6202757997\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003esumit\u003c/td\u003e \u003ctd\u003esumit2011kmr@gmail.com\u003c/td\u003e \u003ctd\u003e6202757997\u003c/td\u003e \u003c/tr\u003e \u003c/table\u003e output of above HTML code Name Email Phone sumit sumit2011kmr@gmail.com 6202757997 sumit sumit2011kmr@gmail.com 6202757997 ","date":"25-05-2024","objectID":"/html/:6:3","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Styling tables You can customize the apperance of tables using css. by applying css styles to the \u003ctable\u003e, \u003cth\u003e, and \u003ctd\u003e elements, you can change the table’s layout, font, color, spacing and more. table { border-collapse: collapse; width: 100%; } td, th { padding: 8px; border: 1px solid black; } th { background-color: lightgray; } td { text-align: center; } ","date":"25-05-2024","objectID":"/html/:6:4","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"7. HTML Forms📝 ","date":"25-05-2024","objectID":"/html/:7:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Form structure Forms are created using the \u003cform\u003e element. Inside the \u003cform\u003e element, we define form controls such as input fields, checkboxes, radio buttons, dropdowns, and buttons. Example: \u003cform action=\"/submit\" method=\"POST\"\u003e \u003c!-- Form controls go here --\u003e \u003c/form\u003e Methods for submitting form data: GET and POST ","date":"25-05-2024","objectID":"/html/:7:1","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Labels Label elements provide a descriptive text label for form controls, such as input fields, checkboxes, and radio buttons. Associating labels with form controls improves usability by providing visual and interactive cues. \u003cform action=\"/submit\" method=\"POST\"\u003e \u003clabel for=\"username\"\u003eUsername:\u003c/label\u003e \u003cinput type=\"text\" id=\"username\"/\u003e \u003c/form\u003e output of above HTML code Username: ","date":"25-05-2024","objectID":"/html/:7:2","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Input fields Input fields \u003cinput/\u003e allow users to enter data. They can be used for various types of user input, such as text, numbers, dates, emails, and more. \u003cinput type=\"text\" name=\"username\" placeholder=\"Enter your username\"/\u003e Variations of the textbox input field: text - Renders a simple textbox email - Renders a textbox for inputting emails password - Renders a textbox for inputting passwords number - Renders a textbox for inputting numbers date - Renders a textbox for inputting dates time - Renders a textbox for inputting time ","date":"25-05-2024","objectID":"/html/:7:3","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Input fiels attributes Attributes for all textbox variation elements: value - default value placeholder - placeholder text maxlength - maximum character length disabled - disables the input, values will not be submitted readonly - disables the input, values will be submitted size - visible width of an input element required - specifies a required field which the user must fill Attributes for number, date and time: min - Defines the minimum value max - Defines the maximum value The step attribute is specific to the number and time fields and specifies a stepping interval. ","date":"25-05-2024","objectID":"/html/:7:4","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Checkbox and radio buttons Checkboxes (\u003cinput type=\"checkbox\" /\u003e) and radio buttons (\u003cinput type=\"radio\" /\u003e) allow users to select multiple options (checkboxes) or choose a single option from a group (radio buttons). To specify default selection, you can use the checked attribute. \u003cinput type=\"checkbox\" name=\"option1\" value=\"Option 1\" checked /\u003e Option 1 \u003cinput type=\"checkbox\" name=\"option2\" value=\"Option 2\"/\u003e Option 2 \u003cinput type=\"radio\" name=\"choice\" value=\"Choice 1\" checked /\u003e Choice 1 \u003cinput type=\"radio\" name=\"choice\" value=\"Choice 2\"/\u003e Choice 2 output of above HTML code Option 1 Option 2 Choice 1 Choice 2 ","date":"25-05-2024","objectID":"/html/:7:5","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Select dropdowns Select dropdowns \u003cselect\u003e provide users with a list of options from which they can choose. Supports multiple selection with the multiple attribute. To define default option, use selected attribute on \u003coption\u003e element \u003cselect name=\"country\"\u003e \u003coption value=\"usa\" selected\u003eUSA\u003c/option\u003e \u003coption value=\"canada\"\u003eCanada\u003c/option\u003e \u003coption value=\"uk\"\u003eUK\u003c/option\u003e \u003c/select\u003e output of above HTML code USA Canada UK ","date":"25-05-2024","objectID":"/html/:7:6","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Textarea The \u003ctextarea\u003e element is used in HTML to create a multi-line text input field that the user can type into. \u003ctextarea name=\"message\" rows=\"3\" cols=\"50\"\u003eDefault message\u003c/textarea\u003e output of above HTML code Default message ","date":"25-05-2024","objectID":"/html/:7:7","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"File upload The \u003cinput type=\"file\"/\u003e element renders a control for selecting and uploading files. \u003cinput type=\"file\" name=\"FileUpload\"/\u003e output of above HTML code Specific attributes: accept - Specifies the types of files that the server accepts (image/png, image/jpeg). multiple - Enables the uploading of multiple files at once \u003cinput type=\"file\" name=\"FileUpload\" accept=\"image/png, image/jpeg\" multiple /\u003e output of above HTML code ","date":"25-05-2024","objectID":"/html/:7:8","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Buttons Buttons \u003cbutton\u003e allow users to perform actions within the form, such as submitting the form or resetting input fields. \u003cbutton type=\"submit\"\u003eSubmit\u003c/button\u003e \u003cbutton type=\"reset\"\u003eReset\u003c/button\u003e output of above HTML code Submit Reset ","date":"25-05-2024","objectID":"/html/:7:9","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"GET request GET requests are primarily used to retrieve data from a server. When a client sends a GET request, it asks the server to provide a representation of a specific resource. Data in a GET request is appended to the URL as query parameters. GET requests are visible in the browser’s address bar, making them less secure for sensitive data transmission. ","date":"25-05-2024","objectID":"/html/:7:10","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"POST request POST requests are used to send data to the server to create or modify resources. When a client sends a POST request, it includes the data in the request body. POST requests are not visible in the browser’s address bar, providing better security for sensitive data transmission. Data in a POST request is included in the request body. ","date":"25-05-2024","objectID":"/html/:7:11","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Difference and usecases The main differences between POST and GET requests can be summarized as follows: GET requests are used for data retrieval, while POST requests are used for data submission or modification. GET requests append data to the URL as query parameters, while POST requests include data in the request body. GET requests are visible in the browser’s address bar, while POST requests are not. Use GET requests when: Retrieving data from the server. Accessing public information that does not require sensitive data. Sending lightweight data or parameters. Use POST requests when: Submitting form data or user input. Modifying data on the server. Sending sensitive data that should not be visible in the URL or browser history. ","date":"25-05-2024","objectID":"/html/:7:12","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"8. HTML Media Elements ","date":"25-05-2024","objectID":"/html/:8:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Images As already mentioned, images are displayed using the \u003cimg\u003e element. They enhance the visual appeal and convey information on your webpages. Example: \u003cimg src=\"image.jpg\" alt=\"Description of the image\"/\u003e output of above HTML code Here are some commonly used image formats: JPEG: It’s best for photographs or images with lots of colors. JPEGs can be compressed considerably, which can result in a faster load time. PNG: It’s ideal for images that require transparency and higher quality. PNGs are usually larger than JPEGs and should be used sparingly. SVG: Ideal for vector graphics as they are resolution-independent and typically smaller in file size. WebP: A modern image format that provides superior lossless and lossy compression for images on the web. ","date":"25-05-2024","objectID":"/html/:8:1","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Audio Audio content can be embedded using the \u003caudio\u003e element. It allows you to provide audio files playable directly on your webpages. Example: \u003caudio controls\u003e \u003csource src=\"audio.mp3\" type=\"audio/mpeg\"\u003e Your browser does not support the audio element. \u003c/audio\u003e output of above HTML code Your browser does not support the audio element. ","date":"25-05-2024","objectID":"/html/:8:2","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Video Video content can be embedded using the \u003cvideo\u003e element. It allows you to provide video files playable directly on your webpages. Example: \u003cvideo controls\u003e \u003csource src=\"video.mp4\" type=\"video/mp4\"\u003e Your browser does not support the video element. \u003c/video\u003e output of above HTML code Your browser does not support the video element. ","date":"25-05-2024","objectID":"/html/:8:3","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Svg SVGs, or Scalable Vector Graphics, are used to include vector-based images in your HTML document. They are resolution-independent and can scale without loss of quality, which makes them ideal for graphics like logos or icons. Example: \u003csvg width=\"50\" height=\"50\"\u003e \u003ccircle cx=\"25\" cy=\"25\" r=\"20\" stroke=\"black\" stroke-width=\"3\" fill=\"red\" /\u003e \u003c/svg\u003e output of above HTML code ","date":"25-05-2024","objectID":"/html/:8:4","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Iframes An iframe is used to embed another HTML document within the current one. You can use this to include content from another website, like a YouTube video or a map from Google Maps. Example: \u003ciframe src=\"https://www.youtube.com/embed/ScMzIvxBSi4\" title=\"YouTube video\" width=\"600\" height=\"400\"\u003e \u003c/iframe\u003e output of above HTML code ","date":"25-05-2024","objectID":"/html/:8:5","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Enhancing accessibility Provide meaningful alternative text (alt) for images to describe their content to users who rely on screen readers or when the image cannot be displayed. For video and audio content, include captions, transcripts, or audio descriptions to make them accessible to users with hearing impairments. Example: \u003cimg src=\"https://placehold.co/600x400\" alt=\"Description of the image\" title=\"Additional information about the image\" /\u003e output of above HTML code ","date":"25-05-2024","objectID":"/html/:8:6","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"9. HTML Semantics ","date":"25-05-2024","objectID":"/html/:9:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Header The \u003cheader\u003e element represents the introductory or navigational content at the top of a webpage or a specific section within a webpage. \u003cheader\u003e \u003ch1\u003eWelcome to my website\u003c/h1\u003e \u003cnav\u003e \u003ca href=\"/\"\u003eHome\u003c/a\u003e \u003ca href=\"/about\"\u003eAbout\u003c/a\u003e \u003ca href=\"/contact\"\u003eContact\u003c/a\u003e \u003c/nav\u003e \u003c/header\u003e ","date":"25-05-2024","objectID":"/html/:9:1","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Navigation The \u003cnav\u003e element represents a section of a webpage that contains navigation links allowing users to navigate through different areas or pages of a website. \u003cnav\u003e \u003ca href=\"/\"\u003eHome\u003c/a\u003e \u003ca href=\"/about\"\u003eAbout\u003c/a\u003e \u003ca href=\"/contact\"\u003eContact\u003c/a\u003e \u003c/nav\u003e ","date":"25-05-2024","objectID":"/html/:9:2","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Main The \u003cmain\u003e element represents the main content of a webpage. It should contains unique content that is directly related to the purpose or central topic of the webpage. \u003cmain\u003e \u003ch1\u003eAbout us\u003c/h1\u003e \u003cp\u003eWelcome to our website\u003c/p\u003e \u003c/main\u003e ","date":"25-05-2024","objectID":"/html/:9:3","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Article The \u003carticle\u003e element represents a self contained composition that can be independently distributed or reused. it can represent blog posts, news article, forum, posts and more. \u003carticle\u003e \u003ch2\u003e10 Tips to become successful web developer.\u003c/h2\u003e \u003cp\u003eHere are 10 essential tips.....\u003c/p\u003e \u003c/article\u003e ","date":"25-05-2024","objectID":"/html/:9:4","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Section The \u003csection\u003e element represents a standlone section within a document or a thematic grouping of content. It helps to organize and structure the content of a webpage. \u003csection\u003e \u003ch2\u003eOur Services\u003c/h2\u003e \u003cp\u003eWe offer a wide range of services...\u003c/p\u003e \u003c/section\u003e ","date":"25-05-2024","objectID":"/html/:9:5","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Aside The \u003caside\u003e element represents content that is related to the main content of a webpage. It can contain sidebars, pull quotes, advertisements or other supporting information. \u003caside\u003e \u003ch3\u003eRelated Articles\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"/article1\"\u003eArticle 1\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/article2\"\u003eArticle 2\u003c/a\u003e\u003c/li\u003e \u003cli\u003e\u003ca href=\"/article3\"\u003eArticle 3\u003c/a\u003e\u003c/li\u003e \u003c/ul\u003e \u003c/aside\u003e ","date":"25-05-2024","objectID":"/html/:9:6","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Footer THe \u003cfooter\u003e element represents the footer or the bottom section of a webpage. It typically contains the copywrite information, links to legal documents and contact details. \u003cfooter\u003e \u003cp\u003e\u0026copy; 2023 sumit. All rights reserved.\u003c/p\u003e \u003cnav\u003e \u003ca href=\"/privacy\"\u003ePrivacy Policy\u003c/a\u003e \u003ca href=\"/terms\"\u003eTerms and Services\u003c/a\u003e \u003c/nav\u003e \u003c/footer\u003e ","date":"25-05-2024","objectID":"/html/:9:7","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"10. HTML Styles ","date":"25-05-2024","objectID":"/html/:10:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"CSS Syntax CSS consists of rulesets that define how HTML elements should be styled. A ruleset consists of a selector and one or more property-value pairs. Examole: selector { property: value; property: value; /* more properties */ } ","date":"25-05-2024","objectID":"/html/:10:1","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Applying styles-Selectors To apply styles to HTML elements you can use different type of selectors. Tag selector A tag selector slects elements based on their HTML tag name. Class selector A class selector selects elements based on the presence of a specific class attribute value. Id selector An Id selector selects a specific elements based on the unique ID attribute value. p { color: blue; } .my-class { font-weight: bold; } #my-id { background-color: yellow; } ","date":"25-05-2024","objectID":"/html/:10:2","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Applying styles-Types To apply styles to HTML you can use different CSS types Inline CSS Inline css is used to apply a unique style to a singl HTML element. It uses the style attribute of an HTML element. This method of insertion applies the CSS rules directly into the HTML file. \u003cp style=\"color: blue;\"\u003e this is a paragraph with inline css.\u003c/p\u003e Internal CSS Internal css also known as embedded css. it is used to a whole HTML page. The CSS rules are put in a \u003cstyle\u003e block in the \u003chead\u003e section of the HTML file. Example: \u003cstyle\u003e p { color: red; } \u003c/style\u003e External CSS External css involves creating a separate .css file and linking it to your HTML document. This method of insertion adds in minimizing code redundancy and promotes reusability. Example: First create an external css file inside your project folder.(styles.css) p{ color: green; } Then, link this css file to your HTML document. \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003clink rel=\"stylesheet\" href=\"style.css\"\u003e \u003c/head\u003e \u003cbody\u003e \u003cp\u003eThis is a paragraph with external css.\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e ","date":"25-05-2024","objectID":"/html/:10:3","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Cascading and specificity CSS follows a cascading and specificity model. which means that multiple styles can be applied to an element, and the most specific style takes precedence. Inline Styles : Inline styles are applied directly to individual HTML elements using the style attribute. Example: \u003cp style=\"color: red;\"\u003ethis is a red paragraph.\u003c/p\u003e Specificity : The specificity of a selector determines its priority when conflicting styles are applied. inline styles have the highest specificity, followed by ID selectors, class selectors and tag selectors. ","date":"25-05-2024","objectID":"/html/:10:4","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Common CSS properties CSS provides a wide range of properties to control the appearance of HTML elements. color : Specifies the text color. background-color : Sets the background color. font-family : Defines the font family to use for text. font-size : Specifies the font size. margin : Controls the outer spacing of an element. padding : Sets the inner spacing of an elemet. border : Defines the border style,width and color. Example: h1 { color: blue; font-family: Arial, sans-serif; margin-bottom: 20px; padding: 10px; border: 1px solid black; } ","date":"25-05-2024","objectID":"/html/:10:5","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"11. HTML Best Practices ","date":"25-05-2024","objectID":"/html/:11:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Use proper indentation and formatting Proper indentation and formatting make your HTML code more readable and easier to understand. Indent nested elements to clearly represent their hierarchy and use consistent spacing and line breaks. Example: \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003ctitle\u003eMy Web Page\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e \u003cheader\u003e \u003ch1\u003eWelcome\u003c/h1\u003e \u003c/header\u003e \u003cmain\u003e \u003cp\u003eThis is the main content.\u003c/p\u003e \u003c/main\u003e \u003cfooter\u003e \u003cp\u003e\u0026copy; 2023 My Webpage\u003c/p\u003e \u003c/footer\u003e \u003c/body\u003e \u003c/html\u003e ","date":"25-05-2024","objectID":"/html/:11:1","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Use semantic HTML elements Utilize semantic HTML elements to provide meaning and structure to your content. Semantic elements like \u003cheader\u003e, \u003cnav\u003e, \u003cmain\u003e, \u003carticle\u003e, \u003cfooter\u003e convey the purpose and role of each section, enhancing accessibility and search engine optimization. Example: \u003cheader\u003e \u003ch1\u003eWelcome\u003c/h1\u003e \u003c/header\u003e \u003cmain\u003e \u003carticle\u003e \u003ch2\u003eAbout Us\u003c/h2\u003e \u003cp\u003eWe are a company dedicated to...\u003c/p\u003e \u003c/article\u003e \u003c/main\u003e \u003cfooter\u003e \u003cp\u003e\u0026copy; 2023 My Webpage\u003c/p\u003e \u003c/footer\u003e ","date":"25-05-2024","objectID":"/html/:11:2","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Provide descriptive and accessible text alternatives For images, videos, and other non-text content, always include descriptive alternative text (alt attribute) to provide information about the content for users who cannot see it. Use concise and meaningful descriptions that convey the purpose or context of the content. Example: \u003cimg src=\"image.jpg\" alt=\"Description of the image\" /\u003e ","date":"25-05-2024","objectID":"/html/:11:3","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Separate structure and presentation Separate the structure (HTML) from the presentation (CSS) and behavior (JavaScript) of your webpages. Keep your HTML code focused on defining the content and structure, while styling and interactivity are handled through external CSS and JavaScript files. Example: \u003clink rel=\"stylesheet\" href=\"styles.css\"/\u003e \u003cscript src=\"script.js\"\u003e\u003c/script\u003e ","date":"25-05-2024","objectID":"/html/:11:4","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Optimize performance To improve website performance, minimize the use of unnecessary elements, attributes, and external resources. Use efficient techniques like compressing images, combining and minifying CSS and JavaScript files, and leveraging browser caching. Example: \u003clink rel=\"stylesheet\" href=\"styles.css\"/\u003e \u003cscript src=\"script.js\"\u003e\u003c/script\u003e ","date":"25-05-2024","objectID":"/html/:11:5","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Validate your HTML Regularly validate your HTML code using online validation tools or browser developer tools. Validating ensures that your code adheres to the HTML specifications and helps identify any errors or potential compatibility issues. Example: \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003c!-- HTML code goes here --\u003e \u003c/html\u003e ","date":"25-05-2024","objectID":"/html/:11:6","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Optimize images The first step in optimizing images is choosing the correct file format. JPEG: It’s best for photographs or images with lots of colors. JPEGs can be compressed considerably, which can result in a faster load time. PNG: It’s ideal for images that require transparency and higher quality. PNGs are usually larger than JPEGs and should be used sparingly. SVG: Ideal for vector graphics as they are resolution-independent and typically smaller in file size. WebP: A modern image format that provides superior lossless and lossy compression for images on the web. Resize Images: Images should be resized to fit the layout of your website. Image Compression: Compression reduces the file size without noticeably degrading the quality of the image below an acceptable level. Use CSS Sprites: CSS sprites combine multiple images into one single image, which can significantly reduce HTTP requests and improve load times. Lazy Loading: Lazy loading is a technique that delays the loading of non-critical or non-visible content until the point of need. Use a CDN: Content Delivery Networks (CDNs) can cache your images across a network of servers worldwide, making your site faster for users around the globe. ","date":"25-05-2024","objectID":"/html/:11:7","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"12. ARIA Labels Enhancing Accessibility in web development ","date":"25-05-2024","objectID":"/html/:12:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Understanding ARIA Labels ARIA labels are used to provide additional infomation to assistive technolory, such as screen readers, enabling a better user experiance for individuals with disabilities. Example: \u003cbutton aria-label=\"Delete item\"\u003eX\u003c/button\u003e ","date":"25-05-2024","objectID":"/html/:12:1","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Understanding ARIA roles and properties ARIA roles define the purpose or type of an element, while ARIA properties provide additional properties or characteristics to describe the element further. Example: \u003cdiv role=\"tablist\"\u003e \u003cbutton role=\"tab\" aria-selected=\"true\" id=\"tab1\"\u003eTab 1\u003c/button\u003e \u003cbutton role=\"tab\" aria-selected=\"false\" id=\"tab1\"\u003eTab 2\u003c/button\u003e \u003c/div\u003e \u003cdiv role=\"tabpanel\" aria-labelledby=\"tab1\"\u003eTab 1 content...\u003c/div\u003e \u003cdiv role=\"tabpanel\" aria-labelledby=\"tab2\" hidden\u003eTab 2 content...\u003c/div\u003e ","date":"25-05-2024","objectID":"/html/:12:2","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Common use cases for ARIA Labels Describing complex or interactive elements: \u003cdiv role=\"button\" aria-haspopup=\"true\" aria-label=\"open menu\"\u003eMenu\u003c/div\u003e Enhancing link texts: \u003ca href=\"/profile\" aria-label=\"view sumit's profile\"\u003esumit kr\u003c/a\u003e Describing images and Non-text content: \u003cbutton aria-label=\"settings\"\u003e \u003cimg src=\"settings-icon.png\" alt=\"desc of image\"\u003e \u003c/button\u003e ","date":"25-05-2024","objectID":"/html/:12:3","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Implementing ARIA Labels Use the aria-label attribute. Leverage ARIA roles and properties. Keep labels concise and descriptive. Test with assistive technologies. ","date":"25-05-2024","objectID":"/html/:12:4","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"13. SEO for html ","date":"25-05-2024","objectID":"/html/:13:0","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"HTML Meta tags Meta tags in HTML are typically used within the \u003chead\u003e section of an HTML document to define metadata about the page. The following are key meta elements: \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"description\" content=\"Free Web tutorials\"\u003e \u003cmeta name=\"keywords\" content=\"HTML,CSS,JavaScript\"\u003e \u003cmeta name=\"author\" content=\"Sumit Kr\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003cmeta http-equiv=\"refresh\" content=\"30\"\u003e \u003cmeta name=\"robots\" content=\"noindex,nofollow\"\u003e Example: \u003c!DOCTYPE html\u003e \u003chtml lang=\"en\"\u003e \u003chead\u003e \u003cmeta charset=\"UTF-8\"\u003e \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e \u003cmeta name=\"description\" content=\"this is a tutorial about HTML\" /\u003e \u003cmeta name=\"keywords\" content=\"Home, relevent, page, content, keywords\" /\u003e \u003cmeta name=\"author\" content=\"Sumit Kumar\" /\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003eWelcome to my website\u003c/h1\u003e \u003cp\u003ethis is a paragraph.\u003c/p\u003e \u003c/body\u003e \u003c/html\u003e ","date":"25-05-2024","objectID":"/html/:13:1","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Microdata Microdata is a specific type of syntax that can be added to HTML to create machine readable data from the contents of a webpage. Microdata uses a set of new HTML arrribute to embed structured data within existing HTML content. The attribute are: itemscope : This attribute is a boolean attribute that declares a new item. itemtype : This attribute declares what kind of item is being defined. It works in conjunction with itemscope. itemprop : This attribute is used to add properties to an item. itemid : This attribute assign a unique identifier to an item, providing a globally unique ID foe the item being marked up. Example: \u003cdiv itemscope itemtype=\"http://schema.org/Movie\"\u003e \u003ch1 itemprop=\"name\"\u003eAvenger: Endgame\u003c/h1\u003e \u003cspan\u003eDirectors: \u003cspan itemprop=\"director\"\u003eAnthony Russo\u003c/span\u003e \u003cspan itemprop=\"director\"\u003eJoe Russo\u003c/span\u003e \u003c/span\u003e \u003cspan itemprop=\"genre\"\u003eAction, Adventure, Drama\u003c/span\u003e \u003ca href=\"../movies/avengers-endgame.html\" itemprop=\"url\"\u003eMore details\u003c/a\u003e \u003c/div\u003e ","date":"25-05-2024","objectID":"/html/:13:2","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"SEO best practice By implementing SEO best practice while writing HTML, You can improve the visibility of your web pages in search engine results. Use Semantic HTML Elements Incorporate ARIA Labels Optimize Meta Tags Optimize these meta tags by including relevant keywords Structure Content with Headings Optimize Image Alt Text ","date":"25-05-2024","objectID":"/html/:13:3","tags":["html"],"title":"HTML Basics","uri":"/html/"},{"categories":["Web Dev"],"content":"Navigation system works on the concept of linked list. Note Use the table of contents to navigate to the portion that you are interested in. ","date":"25-05-2024","objectID":"/mongodb/:0:0","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"1. Introduction: mongo db is kind of database it is a nosql database it stores data in the form of files. the data is not structured which is a main advantage of this database. ","date":"25-05-2024","objectID":"/mongodb/:1:0","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"Database Catagories RDBMS: Mysql, oracle, Sql server (handle only structured data) NoSQL: mongodb, redis mongo db is a popular open source Nosql database management system ","date":"25-05-2024","objectID":"/mongodb/:1:1","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"what is Nosql? Not only sql(nosql) databases is designed to handle structured semi structured and unstructured data. ","date":"25-05-2024","objectID":"/mongodb/:1:2","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"difference between rdbms and nosql rdbms: store data in the form of table it is designed to handle structured data note: structured data means predefined and fixed schema it use the relational model where data is stored in the tables with rows and columns. nosql: store data in the form of document bunch of documents called collection designed to handle structured semi structured and unstructured data. it use a variety of flexible data models such as document, columnar and graph. ","date":"25-05-2024","objectID":"/mongodb/:1:3","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"when to use rdbms and to use nosql db? rdbms: critical finance and banking and ecommerce, it is suitable for application that require complex trancasaction and data intigrity. nosql: social media , gaming, large database, it is designed to handle large volume of data with high speed read and write operations such as social media,IOT and gaming. ","date":"25-05-2024","objectID":"/mongodb/:1:4","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"what are document and collection in nosql? a document is a semi structured data structure(XML, Json format) that stores information in a nosql database it is similar to a row in a table in rdbms. a collections is group of documents that are stored together in a Nosql database. it is similar to a table in a rdbms. ","date":"25-05-2024","objectID":"/mongodb/:1:5","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"what are crud in mongodb c: create: inserting new document into the mondodb collection r: read: retriving data from a mongodb collection u: update: modifying existing document D: delete: removing document form the collection ","date":"25-05-2024","objectID":"/mongodb/:1:6","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"how to connect to mongodb server from node js app ","date":"25-05-2024","objectID":"/mongodb/:1:7","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"what are query operator in mongodb? query operators are special keywords or symbls to perform operations like comparison, logical operations in queries. ","date":"25-05-2024","objectID":"/mongodb/:1:8","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"what is projection in mongodb? How to implement it? projection is way of specifying which fields should be returned in the query results. projection can be implemented by using the project method. ","date":"25-05-2024","objectID":"/mongodb/:1:9","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"what are indexes in mongodb? How indexing make data retrieval faster? indexes are data structure that improve the speed of data retrival operations on the coll ections By default index is automatically created on _id field. mongodb automatically updates the index tree as document are inserted, updated or deleted ensuring the index remains accurate. when querying with indexed fields, mongodb uses the index to efficiently locate matching documents avoiding a full collection scan. ","date":"25-05-2024","objectID":"/mongodb/:1:10","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"what is mongoose? what are the advantages of using it? mongoose is an object data modeling (ODM) library for mongodb and node js mongoose provides schema-based solution to model application data ","date":"25-05-2024","objectID":"/mongodb/:1:11","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"what is the role of schema in Mongoose? how to define it? A schema in mongoose defines the structure, validation rules, and behaviour of mongodb documents, ensuring data consistancy and intigrity. it is defined using the mongoose.schema() function. ","date":"25-05-2024","objectID":"/mongodb/:1:12","tags":["html"],"title":"MongoDb Basics","uri":"/mongodb/"},{"categories":["Web Dev"],"content":"Most useful git commands. intro Here i summarises the all git commands which is used frequently. It helps developers manage and track changes in their projects. # Initializes a new Git repository in the current directory. git init # To configure the the email id in local git repo. git config --global user.email \"your_email_id\" # To configure the username in the local git repo. git config --global user.name \"your-user-name\" # To check the user email in git local repo. git config --global user.email # Adds a file or directory to the staging area, preparing it to be committed. git add . # to commmit all the changes. git commit -m \"commit_message\" # Uploads local repository changes to the remote repository. git push -u origin main echo \"# test\" \u003e\u003e README.md git add README.md git branch -M main git remote add origin https://github.com/sumit2011/test.git git clone \u003crepo_link\u003e git add \u003cfile_name\u003e git status git config git pull git config # To show the details of the commits. git log git remote -v ","date":"29-02-2024","objectID":"/git-commands/:0:0","tags":["git"],"title":"git commands","uri":"/git-commands/"},{"categories":["Web Dev"],"content":"Most useful sql commands. ","date":"29-02-2024","objectID":"/sql/:0:0","tags":["git"],"title":"SQL","uri":"/sql/"},{"categories":["Web Dev"],"content":"Intro ","date":"29-02-2024","objectID":"/sql/:1:0","tags":["git"],"title":"SQL","uri":"/sql/"},{"categories":["Web Dev"],"content":"Database Database is collection of data in a format that can be accessed. ","date":"29-02-2024","objectID":"/sql/:1:1","tags":["git"],"title":"SQL","uri":"/sql/"},{"categories":["Web Dev"],"content":"DBMS Asoftware application used to manage our DB is called DBMS; ","date":"29-02-2024","objectID":"/sql/:1:2","tags":["git"],"title":"SQL","uri":"/sql/"},{"categories":["Web Dev"],"content":"Types of database Relaational: data stored in tables ex mysql we ues sql Non-relational: data not stored in tables like mongodb ","date":"29-02-2024","objectID":"/sql/:2:0","tags":["git"],"title":"SQL","uri":"/sql/"},{"categories":["Web Dev"],"content":"What is sql","date":"29-02-2024","objectID":"/sql/:3:0","tags":["git"],"title":"SQL","uri":"/sql/"},{"categories":null,"content":"About me","date":"07-01-2023","objectID":"/about/","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Hii, my name is Sumit Kumar, i am currently pursuing B.Tech at NIT Srinagar. I’m interested in cybersecurity and competitive programming and love to solve problems. I’m also a part of z3r0d4y(a cybersecurity club at NIT Srinagar). I have the following qualities: I’m curious to learn new things. I’m loyal to my family and friends. Resume ","date":"07-01-2023","objectID":"/about/:0:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Skills ","date":"07-01-2023","objectID":"/about/:1:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Cybersecurity To be honest I’m just a beginner at this stage and interested to learn all about hacking. I’m currently learning hacking from the following platforms. Platform: THM , HTB , Hacker-X. THM Certificates THM Badges THM Pwned Machines Pickle Rick The Simple CTF RootMe Basic Pentesting Tools ","date":"07-01-2023","objectID":"/about/:1:1","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Competitive Programming I’m also learning Data Structure and Algorithm, C++, C, Python. Platform: codechef, coding ninja,geeks for geeks,leetcode. Languages ","date":"07-01-2023","objectID":"/about/:1:2","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Web Development My web development skill is quite good. I know all the basics of development and i also have created many projects. Tools \u0026 Languages Certificates ","date":"07-01-2023","objectID":"/about/:1:3","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Projects ","date":"07-01-2023","objectID":"/about/:2:0","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Webd project Deadly Snake T1C-T4K-T0E Portfolio Community Page ","date":"07-01-2023","objectID":"/about/:2:1","tags":null,"title":"About me","uri":"/about/"},{"categories":null,"content":"Blog Writer I am also a blog writer. I usually write bolgs in my free time usually based on DSA topics. Also on the development and security. I have my own working 2 blog channels. DSA Blogs Sec-Blogs ","date":"07-01-2023","objectID":"/about/:2:2","tags":null,"title":"About me","uri":"/about/"}]